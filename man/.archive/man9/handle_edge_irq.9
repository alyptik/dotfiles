'\" t
.\"     Title: handle_edge_irq
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: January 2017
.\"    Manual: Public Functions Provided
.\"    Source: Kernel Hackers Manual 4.10.0-rc1
.\"  Language: English
.\"
.TH "HANDLE_EDGE_IRQ" "9" "January 2017" "Kernel Hackers Manual 4\&.10\&" "Public Functions Provided"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
handle_edge_irq \- edge type IRQ handler
.SH "SYNOPSIS"
.HP \w'void\ handle_edge_irq('u
.BI "void handle_edge_irq(struct\ irq_desc\ *\ " "desc" ");"
.SH "ARGUMENTS"
.PP
\fIdesc\fR
.RS 4
the interrupt description structure for this irq
.RE
.SH "DESCRIPTION"
.PP
Interrupt occures on the falling and/or rising edge of a hardware signal\&. The occurrence is latched into the irq controller hardware and must be acked in order to be reenabled\&. After the ack another interrupt can happen on the same source even before the first one is handled by the associated event handler\&. If this happens it might be necessary to disable (mask) the interrupt depending on the controller hardware\&. This requires to reenable the interrupt inside of the loop which handles the interrupts which have arrived while the handler was running\&. If all pending interrupts are handled, the loop is left\&.
.SH "AUTHORS"
.PP
\fBThomas Gleixner\fR <\&tglx@linutronix.de\&>
.RS 4
Author.
.RE
.PP
\fBIngo Molnar\fR <\&mingo@elte.hu\&>
.RS 4
Author.
.RE
.SH "COPYRIGHT"
.br
