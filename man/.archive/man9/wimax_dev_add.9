'\" t
.\"     Title: wimax_dev_add
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: January 2017
.\"    Manual: Linux Networking
.\"    Source: Kernel Hackers Manual 4.10.0-rc1
.\"  Language: English
.\"
.TH "WIMAX_DEV_ADD" "9" "January 2017" "Kernel Hackers Manual 4\&.10\&" "Linux Networking"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
wimax_dev_add \- Register a new WiMAX device
.SH "SYNOPSIS"
.HP \w'int\ wimax_dev_add('u
.BI "int wimax_dev_add(struct\ wimax_dev\ *\ " "wimax_dev" ", struct\ net_device\ *\ " "net_dev" ");"
.SH "ARGUMENTS"
.PP
\fIwimax_dev\fR
.RS 4
WiMAX device descriptor (as embedded in your
\fInet_dev\fR\*(Aqs priv data)\&. You must have called
\fBwimax_dev_init\fR
on it before\&.
.RE
.PP
\fInet_dev\fR
.RS 4
net device the
\fIwimax_dev\fR
is associated with\&. The function expects
\fBSET_NETDEV_DEV\fR
and
\fBregister_netdev\fR
were already called on it\&.
.RE
.SH "DESCRIPTION"
.PP
Registers the new WiMAX device, sets up the user\-kernel control interface (generic netlink) and common WiMAX infrastructure\&.
.PP
Note that the parts that will allow interaction with user space are setup at the very end, when the rest is in place, as once that happens, the driver might get user space control requests via netlink or from debugfs that might translate into calls into wimax_dev\->op_*()\&.
.SH "COPYRIGHT"
.br
