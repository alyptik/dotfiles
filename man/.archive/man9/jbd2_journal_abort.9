'\" t
.\"     Title: jbd2_journal_abort
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: January 2017
.\"    Manual: The Linux Journalling API
.\"    Source: Kernel Hackers Manual 4.10.0-rc1
.\"  Language: English
.\"
.TH "JBD2_JOURNAL_ABORT" "9" "January 2017" "Kernel Hackers Manual 4\&.10\&" "The Linux Journalling API"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
jbd2_journal_abort \- Shutdown the journal immediately\&.
.SH "SYNOPSIS"
.HP \w'void\ jbd2_journal_abort('u
.BI "void jbd2_journal_abort(journal_t\ *\ " "journal" ", int\ " "errno" ");"
.SH "ARGUMENTS"
.PP
\fIjournal\fR
.RS 4
the journal to shutdown\&.
.RE
.PP
\fIerrno\fR
.RS 4
an error number to record in the journal indicating the reason for the shutdown\&.
.RE
.SH "DESCRIPTION"
.PP
Perform a complete, immediate shutdown of the ENTIRE journal (not of a single transaction)\&. This operation cannot be undone without closing and reopening the journal\&.
.PP
The jbd2_journal_abort function is intended to support higher level error recovery mechanisms such as the ext2/ext3 remount\-readonly error mode\&.
.PP
Journal abort has very specific semantics\&. Any existing dirty, unjournaled buffers in the main filesystem will still be written to disk by bdflush, but the journaling mechanism will be suspended immediately and no further transaction commits will be honoured\&.
.PP
Any dirty, journaled buffers will be written back to disk without hitting the journal\&. Atomicity cannot be guaranteed on an aborted filesystem, but we _do_ attempt to leave as much data as possible behind for fsck to use for cleanup\&.
.PP
Any attempt to get a new transaction handle on a journal which is in ABORT state will just result in an \-EROFS error return\&. A jbd2_journal_stop on an existing handle will return \-EIO if we have entered abort state during the update\&.
.PP
Recursive transactions are not disturbed by journal abort until the final jbd2_journal_stop, which will receive the \-EIO error\&.
.PP
Finally, the jbd2_journal_abort call allows the caller to supply an errno which will be recorded (if possible) in the journal superblock\&. This allows a client to record failure conditions in the middle of a transaction without having to complete the transaction to record the failure to disk\&. ext3_error, for example, now uses this functionality\&.
.PP
Errors which originate from within the journaling layer will NOT supply an errno; a null errno implies that absolutely no further writes are done to the journal (unless there are any already in progress)\&.
.SH "AUTHORS"
.PP
\fBRoger Gammans\fR <\&rgammans@computer-surgery.co.uk\&>
.RS 4
Author.
.RE
.PP
\fBStephen Tweedie\fR <\&sct@redhat.com\&>
.RS 4
Author.
.RE
.SH "COPYRIGHT"
.br
