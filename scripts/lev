#!/bin/perl

use strict;
use warnings;

# ($#ARGV == 1) or die "Usage: $0 <string1> <string2>\n";
#
# my ($_s1, $_s2) = (@ARGV);
#
# my $_result;
# $_result .= "The Levenshtein distance between ";
# $_result .= "\"$_s1\" and \"$_s2\" is: ";
# $_result .= levenshtein($_s1, $_s2);
# print "$_result\n";

(scalar @ARGV > 2) or die "Usage: $0 <basestring> <comparstring> ...\n";

my $_base = shift @ARGV;

foreach my $_cmp (@ARGV) {
    my $_result;
    # $_result .= "\"$_base\" -> \"$_cmp\"  ";
    $_result .= "levenshtein(\"$_base\", \"$_cmp\") -> ";
    $_result .= levenshtein($_base, $_cmp);
    print "$_result\n";
}

# Return the Levenshtein distance (also called Edit distance)
# between two strings
#
# The Levenshtein distance (LD) is a measure of similarity between two
# strings, denoted here by s1 and s2. The distance is the number of
# deletions, insertions or substitutions required to transform s1 into
# s2. The greater the distance, the more different the strings are.
#
# The algorithm employs a promimity matrix, which denotes the
# distances between substrings of the two given strings. Read the
# embedded comments for more info. If you want a deep understanding
# of the algorithm, printthe matrix for some test strings
# and study it
#
# The beauty of this system is that nothing is magical - the distance
# is intuitively understandable by humans
#
# The distance is named after the Russian scientist Vladimir
# Levenshtein, who devised the algorithm in 1965
#
sub levenshtein
{
    # $_s1 and $_s2 are the two strings
    # $_len1 and $_len2 are their respective lengths
    #
    my ($_s1, $_s2) = @_;
    my ($_len1, $_len2) = (length $_s1, length $_s2);

    # If one of the strings is empty, the distance is the length
    # of the other string
    #
    return $_len2 if ($_len1 == 0);
    return $_len1 if ($_len2 == 0);

    my %_mat;

    # Init the distance matrix
    #
    # The first row to 0..$_len1
    # The first column to 0..$_len2
    # The rest to 0
    #
    # The first row and column are initialized so to denote distance
    # from the empty string
    #
    for (my $_i = 0; $_i <= $_len1; ++$_i)
    {
        for (my $_j = 0; $_j <= $_len2; ++$_j)
        {
            $_mat{$_i}{$_j} = 0;
            $_mat{0}{$_j} = $_j;
        }

        $_mat{$_i}{0} = $_i;
    }

    # Some char-by-char processing is ahead, so prepare
    # array of chars from the strings
    #
    my @_ar1 = split(//, $_s1);
    my @_ar2 = split(//, $_s2);

    for (my $_i = 1; $_i <= $_len1; ++$_i)
    {
        for (my $_j = 1; $_j <= $_len2; ++$_j)
        {
            # Set the cost to 1 iff the ith char of $_s1
            # equals the jth of $_s2
            #
            # Denotes a substitution cost. When the char are equal
            # there is no need to substitute, so the cost is 0
            #
            my $_cost = ($_ar1[$_i-1] eq $_ar2[$_j-1]) ? 0 : 1;

            # Cell $_mat{$_i}{$_j} equals the minimum of:
            #
            # - The cell immediately above plus 1
            # - The cell immediately to the left plus 1
            # - The cell diagonally above and to the left + the cost
            #
            # We can either insert a new char, delete a char of
            # substitute an existing char (with an associated cost)
            #
            $_mat{$_i}{$_j} = min([$_mat{$_i-1}{$_j} + 1,
                                $_mat{$_i}{$_j-1} + 1,
                                $_mat{$_i-1}{$_j-1} + $_cost]);
        }
    }

    # Finally, the distance equals the rightmost bottom cell
    # of the matrix
    #
    # Note that $_mat{$x}{$y} denotes the distance between the
    # substrings 1..$x and 1..$y
    #
    return $_mat{$_len1}{$_len2};
}


# minimal element of a list
#
sub min
{
    my @_list = @{$_[0]};
    my $_min = $_list[0];

    foreach my $_i (@_list)
    {
        $_min = $_i if ($_i < $_min);
    }

    return $_min;
}
