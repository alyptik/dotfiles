#!/bin/bash

# CLI handling.
#
# norandmaps: Don't use address space randomization. Equimageent to echo 0 > /proc/sys/kernel/randomize_va_space.
# printk.time=y: log in format: "[time ] msg" for all printk messages.
proj_dir=/store/code/projects
base_dir=$proj_dir/kernel
extra_flags=''
opt_append=''
extra_append='norandmaps printk.devkmsg=on printk.time=y'
qemu="qemu-system-x86_64"
append='root=/dev/vda nopat console=ttyS0'
kernel="$base_dir/obj/linux-x86/arch/x86_64/boot/bzImage"
display='-nographic'
image="$base_dir/obj/buildroot-x86/images/rootfs.ext4"
network='-net nic,macaddr=52:54:00:46:de:42,model=virtio -net bridge,br=virbr0'

while getopts :a:b:i:n:dghkms opt; do
	case "$opt" in
	(i)
		image="$OPTARG"
		;;
	(a)
		opt_append="$OPTARG"
		;;
	(b)
		kernel="$OPTARG"
		;;
	(n)
		network="-net nic -net $OPTARG"
		;;
	(d)
		extra_flags="$extra_flags -S -s"
		;;
	(g)
		# vga='-display curses'
		display='-vga virtio'
		;;
	(k)
		extra_append="$extra_append kgdbwait"
		# For those who want to try KDB.
		# extra_append+="$extra_append kgdboc=kbd"
		extra_append="$extra_append kgdboc=ttyS0,115200"
		extra_flags="$extra_flags -serial tcp::1234,server,nowait"
		;;
	(m)
		monitor="-monitor telnet::45454,server,nowait"
		;;
	(s)
		qemu="screen qemu-system-x86_64"
		;;
	(h)
		printf 'usage: %s: [-dghkms] [−b <kernel>] [−i <disk>] [-a <cmdline>] [-n <net>] [<args>]\n' "${0##*/}"
		exit
		;;
	(:|?)
		printf 'illegal option: -%s\n' "$OPTARG"
		printf 'usage: %s: [-dghkms] [−b <kernel>] [−i <disk>] [-a <cmdline>] [-n <net>] [<args>]\n' "${0##*/}"
		exit 2
		;;
	esac
done
shift "$((OPTIND - 1))"

extra_flags="$extra_flags $*"
cmd="$qemu \
	-kernel $kernel \
	-append '$append $extra_append $opt_append' \
	-drive 'file=$image,if=virtio,format=raw' \
	-netdev user,hostfwd=tcp::45455-:45455,id=net0 \
	-m 2G \
	-smp 2 \
	-echr 0x14 \
	-enable-kvm \
	-machine type=pc,accel=kvm \
	-cpu host,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time \
	-show-cursor \
	-usb -device usb-tablet \
	-soundhw all \
	$monitor $display $network $extra_flags \
"

# debug print and execute cmdline
printf '%s\n' "${cmd//	}"
eval "$cmd"
