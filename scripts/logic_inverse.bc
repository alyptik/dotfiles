#!/usr/bin/bc -l logic.bc

### Logic_Inverse.BC - Inverses for bitwise AND and OR

# Negative numbers not yet supported

# Global variable to control no-solution warning messages
# 0 -> warnings suppressed; 1 -> show warnings
# (Some errors are fatal and cannot be suppressed)
dand_sor_warn_=1

# Workhorse function for the below
define dand_sor_(which, z,y ,n){
  auto x,t,os,hz,hy,hn,b,str;
  os=scale;scale=0
  z/=1;y/=1;n/=1
  if(n<-4||z<0||y<0){
    if(which==2||which==3){print "striped_";which-=2}
    if(which==0)print "dand: "
    if(which==1)print "sor: "
    if(z<0||y<0){print "negative unsupported\n";n=0}
    if(n<-4)print "unknown option for n\n"
    scale=os;return -1
  }
  str=-1;if(which==2||which==3)str=which-2
  x=0;t=1;while(z||y){
    hz=z/2;hy=y/2
    # Set b to be the bit in the result
    # Unless altered by n==-4:
    # b == 0 => actual zero bit
    # b == 1 => actual one but
    # b == 2 => don't-care/both bit. Could be either 1 or 0. Choice set by n parameter.
    # b == 3 => failure/neither bit. There are no solutions
    if(which==0||str==0){b=1-y+hy+hy;b+=b+z-hz-hz}
    if(which==1||str==1){b=z-hz-hz;if(y-hy-hy)b=3-b}
    if(which==2||which==3)str=!str
    if(n==-4||n==-3){
      if(n==-4)if(++b==4)b=0
      x+=t*b
      t*=4
    } else if(n==-2||n==-1) {
      if(b==3){
        scale=os
        if(n==-1){
          if(dand_sor_warn_){
            if(which==2||which==3){print "striped_";which-=2}
            if(which==0)print "dand: "
            if(which==1)print "sor: "
            print "no possible solutions\n"
          }
          return -1
        } else {
          return 0
        }
      }
      if(b==2).=x++
    } else {
      if(b==3){
        scale=os
        if(dand_sor_warn_){
          if(which==2||which==3){print "striped_";which-=2}
          if(which==0)print "dand: "
          if(which==1)print "sor: "
          print "no possible solutions\n"
        }
        return -1
      }
      if(b==2){hn=n/2;b=n-hn-hn;n=hn}
      x+=t*b
      t+=t
    }
    z=hz;y=hy
  }
  if(n==-2)x=2^x
  scale=os;return x
}

# n parameter options:
#  n == -4 => base 4 codification: {neither,0,1,both} <=> {0,1,2,3}
#  n == -3 => base 4 codification: {0,1,both,neither} <=> {0,1,2,3} (default)
#  n == -2 => returns number of solutions = N
#  n == -1 => returns number of don't-care bits = D
#             = log2(number of solutions) = log2(N) or -1 if no solution
#  n >=  0 => returns solution specified by n mod N or -1 if no solution
# Hint:
#  n ==  0 => guaranteed to return a solution (the smallest possible)
#             if one exists

# DivAND / De-AND
# Bitwise division in the sense that bitwise AND is bitwise multiplication
# Attempt to find solutions to z = and(x,y) for x
# . any error will cause the return of -1
define dand(z,y ,n) { return dand_sor_(0, z,y, n) }

# SubtractOR / SubtORct
# Bitwise subtraction in the sense that bitwise OR is bitwise addition
# Attempt to find solutions to z = and(x,y) for x
# . any error will cause the return of -1
define  sor(z,y ,n) { return dand_sor_(1, z,y, n) }

# N.B. There is no bitwise XOR subtraction in the style of the above
# since XOR is its own inverse.

# Striped DivAND / De-AND
# Bitwise division in the sense that bitwise AND is bitwise multiplication
# Attempt to find solutions to z = and(x,y) for x
# . any error will cause the return of -1
define striped_dand(z,y ,n) { return dand_sor_(2, z,y, n) }

# Striped SubtractOR / SubtORct
# Bitwise subtraction in the sense that bitwise OR is bitwise addition
# Attempt to find solutions to z = and(x,y) for x
# . any error will cause the return of -1
define  striped_sor(z,y ,n) { return dand_sor_(3, z,y, n) }

# Workhorse print function
define print_01dx_(x){
  auto os,ai,ni,a[],aai,f2,f3;
  os=scale;scale=0;
  x/=1;if(x<0)x=-x
  ai=0;f3=0;ni=i=x
  while(i){i=ni;ni=i/4;a[++ai]=aai=i-ni*4}
  if(!ai){print 0;scale=os;return i}
  for(--ai;ai;ai--){
    i=a[ai]
    if(i==0){print 0}else if(i==1){print 1
    }else if(i==2){print"d";.=f2++}else{print"X";.=f3++}
  }
  if(f3){
    print " => no solution; ",f3," fail bit"
    if(f3>1)print"s"
  }else{
    f2=2^f2
    print " => ",f2," solution"
    if(f2>1)print"s"
  }
  scale=os;return x
}

define dand_print(z,y) { .=print_01dx_(dand_sor_(0, z,y, -3)) }
define sor_print(z,y)  { .=print_01dx_(dand_sor_(1, z,y, -3)) }
define striped_dand_print(z,y) { .=print_01dx_(dand_sor_(2, z,y, -3)) }
define striped_sor_print(z,y)  { .=print_01dx_(dand_sor_(3, z,y, -3)) }