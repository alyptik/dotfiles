'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _disposable = require('./disposable');

var _disposable2 = _interopRequireDefault(_disposable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Emitter = function () {
  function Emitter() {
    _classCallCheck(this, Emitter);

    this.disposed = false;
    this.handlers = {};
  }

  _createClass(Emitter, [{
    key: 'on',
    value: function on(eventName, handler) {
      var _this = this;

      if (this.disposed) {
        throw new Error('Emitter has been disposed');
      }
      if (typeof handler !== 'function') {
        throw new Error('Event handler must be a function');
      }
      var callbacks = this.handlers[eventName];
      if (typeof callbacks === 'undefined') {
        callbacks = this.handlers[eventName] = [handler];
      } else {
        callbacks.push(handler);
      }
      return new _disposable2.default(function () {
        _this.off(eventName, handler);
      });
    }
  }, {
    key: 'off',
    value: function off(eventName, handler) {
      if (this.disposed) {
        return;
      }
      if (!this.handlers[eventName]) {
        return;
      }
      var index = this.handlers[eventName].indexOf(handler);
      if (index !== -1) {
        this.handlers[eventName].splice(index, 1);
      }
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.handlers = {};
    }
  }, {
    key: 'emit',
    value: function emit(eventName) {
      if (this.disposed) {
        return Promise.resolve([]);
      }
      if (!this.handlers[eventName]) {
        return Promise.resolve([]);
      }

      var promises = [];
      var callbacks = this.handlers[eventName];

      for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }

      for (var i = 0, length = callbacks.length; i < length; ++i) {
        promises.push(callbacks[i].apply(null, params));
      }
      return Promise.all(promises);
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this.disposed = true;
      this.clear();
    }
  }]);

  return Emitter;
}();

exports.default = Emitter;