'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactTable = function (_React$Component) {
  _inherits(ReactTable, _React$Component);

  function ReactTable() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactTable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactTable.__proto__ || Object.getPrototypeOf(ReactTable)).call.apply(_ref, [this].concat(args))), _this), _this.state = { sort: null }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReactTable, [{
    key: 'findSortItemByKey',
    value: function findSortItemByKey(column) {
      var sort = this.sort;
      if (Array.isArray(sort)) {
        for (var i = 0, length = sort.length; i < length; ++i) {
          if (sort[i].column === column) {
            return i;
          }
        }
      }
      return -1;
    }
  }, {
    key: 'generateSortCallback',
    value: function generateSortCallback(column) {
      var _this2 = this;

      return function (e) {
        var sort = _this2.sort;
        var append = e.shiftKey;

        var index = _this2.findSortItemByKey(column);
        if (index < 0) {
          var value = { column: column, type: 'asc' };
          sort = append ? sort : [];
          sort.push(value);
        } else {
          var _value = sort[index];
          _value.type = _value.type === 'asc' ? 'desc' : null;
          if (!append) {
            sort = _value.type ? [_value] : [];
          } else if (!_value.type) {
            sort.splice(index, 1);
          }
        }
        _this2.setState({ sort: sort });
      };
    }
  }, {
    key: 'renderHeaderIcon',
    value: function renderHeaderIcon(column) {
      var sort = this.sort;
      var index = sort ? this.findSortItemByKey(column) : -1;
      var icon = _helpers.ARROW.BOTH;
      if (sort && index !== -1) {
        icon = sort[index].type === 'asc' ? _helpers.ARROW.UP : _helpers.ARROW.DOWN;
      }

      return _react2.default.createElement(
        'span',
        { className: 'sort-icon' },
        icon
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          givenRows = _props.rows,
          columns = _props.columns,
          _props$className = _props.className,
          className = _props$className === undefined ? '' : _props$className,
          rowKey = _props.rowKey,
          sort = _props.sort,
          _props$renderHeaderCo = _props.renderHeaderColumn,
          renderHeaderColumn = _props$renderHeaderCo === undefined ? ReactTable.defaultHeaderRenderer : _props$renderHeaderCo,
          _props$renderBodyColu = _props.renderBodyColumn,
          renderBodyColumn = _props$renderBodyColu === undefined ? ReactTable.defaultBodyRenderer : _props$renderBodyColu;


      (0, _helpers.validateProps)(this.props);

      var rows = givenRows;
      var sortInfo = this.sort;
      if (sortInfo.length) {
        rows = sort(sortInfo, rows);
      }

      return _react2.default.createElement(
        'table',
        { className: 'sb-table ' + className, style: this.props.style },
        _react2.default.createElement(
          'thead',
          null,
          _react2.default.createElement(
            'tr',
            null,
            columns.map(function (column) {
              return _react2.default.createElement(
                'th',
                { key: column.key, className: column.sortable && 'sortable', onClick: column.sortable && _this3.generateSortCallback(column.key) },
                renderHeaderColumn(column),
                ' ',
                column.sortable && _this3.renderHeaderIcon(column.key)
              );
            })
          )
        ),
        _react2.default.createElement(
          'tbody',
          null,
          rows.map(function (row) {
            var key = rowKey(row);
            return _react2.default.createElement(
              'tr',
              { key: key },
              columns.map(function (column) {
                var givenOnClick = column.onClick;
                var onClick = givenOnClick && function (e) {
                  givenOnClick(e, row);
                };

                return _react2.default.createElement(
                  'td',
                  { onClick: onClick, key: key + '.' + column.key },
                  renderBodyColumn(row, column.key)
                );
              })
            );
          })
        )
      );
    }
  }, {
    key: 'sort',
    get: function get() {
      return this.state.sort || this.props.initialSort || [];
    }
  }], [{
    key: 'defaultHeaderRenderer',
    value: function defaultHeaderRenderer(item) {
      if (typeof item !== 'string') {
        throw new Error('Non-string header array fed to sb-react-table without renderHeaderColumn prop');
      }
      return item;
    }
  }, {
    key: 'defaultBodyRenderer',
    value: function defaultBodyRenderer(row, column) {
      var value = row[column];
      if (typeof value !== 'string') {
        throw new Error('Non-predictable rows fed to sb-react-table without renderBodyColumn prop');
      }
      return value;
    }
  }]);

  return ReactTable;
}(_react2.default.Component);

module.exports = ReactTable;