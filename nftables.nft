#!/usr/bin/nft -f

# ipv4/ipv6 Simple & Safe Firewall
# you can find examples in /usr/share/nftables/

flush ruleset

define ip_trust = { 127.0.0.1, 192.168.1.98, 192.168.1.1, 192.168.1.2, 98.150.136.16, 76.173.136.206, 98.150.139.104, 98.150.136.0/21 };
define loc_trust = { 127.0.0.1, 192.168.1.0/24, 192.168.10.0/24 };
define ip6_trust = { ::1, 2001:470:d:7e:5e26:aff:fe0b:f7dd, 2001:470:d:7e:c80f:b56b:8de9:56e7, 2001:470:d:7e:b7f9:af60:457d:3d7f };
#define loc6_trust = { ::1 };
define loc6_trust = $ip6_trust;
define fports = { 20, 21, 22, 23, 24, 25, 53, 67, 110, 111, 143, 222, 443, 465, 587, 873, 953, 993, 995, 1723, 2049, 2222, 3333, 3335, 3336, 4434, 5353, 5800, 5801, 5900-6049, 7657,8000 ,8001, 8112, 9000, 9050, 9051, 9091, 20048, 39471, 44543 };
define fserv = { ftp ,ssh, telnet, smtp, pop3, imap, http, https, rsync, pptp, irc };
define inet_bad = 210.245.92.94;


table inet filter {
	chain global {
		ct state established,related accept;
		ct state invalid drop;
		ip protocol icmp accept;
		ip6 nexthdr icmpv6 accept;
		udp dport 53 accept;
	}
	chain input {
		type filter hook input priority 0; policy drop;
		ip saddr $inet_bad counter drop;
		counter accept;
		counter reject;
	}
	chain forward {
		type filter hook forward priority 0; policy accept;
	}
	chain output {
		type filter hook output priority 0; policy accept;
	}
}

# table ip filter {
#         chain logdrop {
#                 #type filter hook input priority 0; policy drop;
#                 # limit rate 1/second counter accept;
#                 # limit rate 10/hour log counter reject;
#                 counter reject;
#                 #counter accept
#                 #counter drop;
#         }
#         chain input {
#                 # Interface jumps
#                 type filter hook input priority 0; policy accept;
#                 # ct state { established, related } counter accept;
#                 # Accept loopback traffic
#                 iifname lo accept;
#                 # Accept pings
#                 # icmp type { echo-request, echo-reply, info-request, info-reply } counter accept;
#                 # Other traffic (i.e. internal)
#                 #iifname != eth1 counter goto internal;
#                 ip saddr $inet_bad counter drop;
#                 # iifname { eth0,mlan0,br0,tun0,ppp0,virbr0 } goto internal;
#                 #iifname eth0 counter goto internal;
#                 # External
#                 # iifname eth1 counter goto external;
#                 #reject with icmp type net-prohibited;
#                 #reject with icmp} type port-unreachable;
#         }
#         chain external {
#                 # allow established/related connections
#                 # ct state { established, related } counter accept;
#                 # early drop of invalid connections
#                 # ct state invalid counter drop;
#                 # Allowed ports
#                 tcp dport $fserv accept;
#                 udp dport $fserv accept;
#                 tcp dport $fports accept;
#                 udp dport $fports accept;
#                 # Log rejected packets
#                 ip saddr $loc_trust counter accept;
#                 jump logdrop;
#         }
#         chain internal {
#                 # allow established/related connection
#                 # ct state { established, related } counter accept;
#                 # Allowed ports
#                 tcp dport $fserv accept;
#                 udp dport $fserv accept;
#                 tcp dport $fports accept;
#                 udp dport $fports accept;
#                 # Webmin
#                 tcp dport { 10000 } ip saddr $ip_trust accept;
#                 udp dport { 10000 } ip saddr $ip_trust accept;
#                 # early drop of invalid connections
#                 ct state invalid drop;
#                 counter accept;
#         }
#         chain forward {
#                 type filter hook forward priority 0;
#                 accept;
#         }
#         chain output {
#                 type filter hook output priority 0;
#                 accept;
#         }
# }
# table ip nat {
#         chain prerouting {
#                 type nat hook prerouting priority -150;
#         }
#         chain postrouting {
#                 type nat hook prerouting priority -150;
#         }
# }
# table ip mangle {
#         chain output {
#                 type route hook output priority -150;
#         }
# }

# table ip6 filter {
#     chain input {
# 	# Interface jumps
# 	type filter hook input priority 0; policy accept;
# 	# Accept loopback traffic
# 	iifname lo accept;
# 	# Accept pings
# 	icmpv6 type { echo-request, nd-neighbor-solicit, nd-router-solicit, mld-listener-query } counter accept;
# 	# Other traffic (i.e. internal)
# 	#iifname != eth1 counter goto internal;
#         #iifname eth0 counter goto internal;
# 	iifname { eth0,wlan,br,tun,ppp,virtbr } goto internal;
#         # External
#         iifname eth1 counter goto external;
# 	#iifname { eth0,wlan,br,tun,ppp,virtbr } goto internal;
# 	#reject with icmpv6 type no-route;
# 	#reject with tcp reset;
#   }
#     chain external {
# 	# allow established/related connections
# 	ct state { established, related } counter accept;
# 	# early drop of invalid connections
# 	ct state invalid counter drop;
# 	# Allowed ports
# 	tcp dport $fserv accept;
# 	udp dport $fserv accept;
# 	tcp dport $fports accept;
# 	udp dport $fports accept;
# 	# Log rejected packets
# 	ip6 saddr $loc6_trust counter accept;
# 	jump logdrop;
#   }
#     chain internal {
# 	# allow established/related connections
# 	ct state { established, related } counter accept;
# 	tcp dport 7997-7998 drop;
# 	udp dport 7997-7998 drop;
# 	# Allowed ports
# 	tcp dport $fserv accept;
# 	udp dport $fserv accept;
# 	tcp dport $fports accept;
# 	udp dport $fports accept;
# 	# Webmin
# 	tcp dport { 10000 } ip6 saddr $ip6_trust accept;
# 	udp dport { 10000 } ip6 saddr $ip6_trust accept;
# 	# early drop of invalid connections
# 	ct state invalid counter drop;
# 	# Log dropped packets
# 	counter accept;
#   }
#     chain forward {
# 	type filter hook forward priority 0;
# 	accept;
#  	}
#     chain output {
# 	type filter hook output priority 0;
# 	accept;
#   }
#     chain logdrop {
# 	#type filter hook input priority 0; policy drop;
# 	limit rate 1/second counter accept;
# 	limit rate 10/hour log counter reject;
#  	counter reject;
# 	#limit rate 1/minute counter log counter reject;
# 	#limit rate 1/second counter log counter accept;
# 	#counter accept;
# 	#counter drop;
#   }
# }
# table ip6 nat {
#    chain prerouting {
# 	type nat hook prerouting priority -150;
#    }
#  chain postrouting {
# 	type nat hook postrouting priority -150;
#   }
# }
#
# table ip6 mangle {
#    chain output {
# 	type route hook output priority -150;
#   }
# }
#
# # vim:set ts=2 sw=2 et:
