#
# weechat -- plugins.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use /set or similar command to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/quickstart
#

[var]
fifo.fifo = "off"
guile.check_license = "off"
guile.gateway_rename.gateways = "(freenode #radare r2tg <NICK>)(freenode #test-channel zv-test <NICK>)"
lua.check_license = "off"
lua.emoji.incoming = "on"
lua.http_item.interval = "5"
lua.http_item.message_color = "default"
lua.http_item.message_postfix = ""
lua.http_item.message_prefix = "Latest WeeChat: "
lua.http_item.pattern = "(%d+%.%d+%.%d+)"
lua.http_item.url = "http://weechat.org/info/stable/"
lua.pastebuf.color_line = "default,default"
lua.pastebuf.color_line_number = "default,darkgray"
lua.pastebuf.fetch_timeout = "30000"
lua.pastebuf.highlighter_timeout = "3000"
lua.pastebuf.open_unsupported_url = "0"
lua.pastebuf.shell = "/usr/bin/zsh"
lua.pastebuf.show_line_number = "1"
lua.pastebuf.sticky_notes_retardness_level = "1"
lua.pastebuf.syntax_highlighter = "pygmentize -l $lang"
lua.urlselect.buffer_name = "normal"
lua.urlselect.buffer_name_color = "green"
lua.urlselect.buffer_number_color = "brown"
lua.urlselect.cmd.i = "/input insert ${url}\x20"
lua.urlselect.cmd.l = "/exec -color weechat -nf -norc -noln hilinks ${url} truecolor manxome"
lua.urlselect.cmd.o = "/exec -bg -nosh b ${url}"
lua.urlselect.cmd.p = "/exec -bg -nosh plumber ${url}"
lua.urlselect.cmd.x = "/exec -bg -sh printf '%s' ${url} | xsel -ib"
lua.urlselect.help_color = "default"
lua.urlselect.highlight_color = "yellow,magenta"
lua.urlselect.index_color = "brown"
lua.urlselect.key_color = "cyan"
lua.urlselect.label.i = "insert into input bar"
lua.urlselect.label.l = "open in weechat buffer"
lua.urlselect.label.o = "open with browser"
lua.urlselect.label.p = "open plumber"
lua.urlselect.label.x = "insert into clipboard"
lua.urlselect.message_color = "default"
lua.urlselect.nick_color = ""
lua.urlselect.scan_merged_buffers = "0"
lua.urlselect.search_prompt_color = "default"
lua.urlselect.search_scope = "url"
lua.urlselect.search_scope_color = "green"
lua.urlselect.skip_remember = "0"
lua.urlselect.status_color = "black,green"
lua.urlselect.status_timeout = "1500"
lua.urlselect.tags = "irc_privmsg,notify_message,notify_private,notify_highlight"
lua.urlselect.time_color = "default"
lua.urlselect.time_format = "%H:%M:%S"
lua.urlselect.title_color = "default"
lua.urlselect.url_color = "_lightblue"
lua.urlselect.use_simple_matching = "1"
perl.atcomplete.enabled = "on"
perl.beep.beep_command_dcc = "off"
perl.beep.beep_command_highlight = "off"
perl.beep.beep_command_pv = "off"
perl.beep.beep_command_timeout = "30000"
perl.beep.beep_dcc = "off"
perl.beep.beep_highlight = "off"
perl.beep.beep_highlight_blacklist = "off"
perl.beep.beep_highlight_whitelist = "off"
perl.beep.beep_pv = "off"
perl.beep.beep_pv_blacklist = "off"
perl.beep.beep_pv_whitelist = "off"
perl.beep.beep_trigger_highlight = ""
perl.beep.beep_trigger_pv = ""
perl.beep.bell_always = "off"
perl.beep.blacklist_nicks = ""
perl.beep.whitelist_channels = ""
perl.beep.whitelist_nicks = ""
perl.chanmon.alignment = "none"
perl.chanmon.color_buf = "on"
perl.chanmon.dynamic = "on"
perl.chanmon.first_run = "true"
perl.chanmon.freenode.#archlinux-offtopic = "off"
perl.chanmon.freenode.#chee-fanclub = "off"
perl.chanmon.logging = "on"
perl.chanmon.merge_private = "on"
perl.chanmon.nick_prefix = "<"
perl.chanmon.nick_suffix = ">"
perl.chanmon.output = "buffer"
perl.chanmon.short_names = "off"
perl.chanmon.show_aways = "off"
perl.chanmon.voidnet.#thevoid = "off"
perl.check_license = "off"
perl.colorize_lines.blacklist_buffers = ""
perl.colorize_lines.buffers = "all"
perl.colorize_lines.highlight = "off"
perl.colorize_lines.highlight_words = "on"
perl.colorize_lines.highlight_words_color = "black,darkgray"
perl.colorize_lines.ignore_tags = "irc_ctcp"
perl.colorize_lines.lines = "on"
perl.colorize_lines.nicks = ".*typikal,.*jp,.*alyptik"
perl.colorize_lines.own_lines = "on"
perl.colorize_lines.tags = "irc_privmsg"
perl.coords.clipboard_command = "|xsel -ip"
perl.coords.color.selection = "reverse.brown,black"
perl.coords.color.selection_cursor = "reverse.underline"
perl.coords.color.url_highlight = "reverse.underline"
perl.coords.color.url_highlight_active = "reverse.brown,black"
perl.coords.copybuf_short_name = ""
perl.coords.hyper_channels = "off"
perl.coords.hyper_nicks = "off"
perl.coords.hyper_prefix = "on"
perl.coords.hyper_show = "url"
perl.coords.mouse.click_select_pane = "on"
perl.coords.mouse.click_through_pane = "on"
perl.coords.mouse.close_on_release = "on"
perl.coords.mouse.copy_on_click = "on"
perl.coords.mouse.handle_scroll = "off"
perl.coords.mouse.scroll_inactive_pane = "on"
perl.coords.mouse.url_open_2nd_click = "on"
perl.coords.url_braces = "[({<"''">})]"
perl.coords.url_non_beginnings = "\W"
perl.coords.url_non_endings = "[.,;:?!_-]""
perl.coords.url_regex = "\w+://\S+ | (?:^|(?<=\s))(?:\S+\.){2,}\w{2,5}(?:/\S*|(?=\s)|$) | (?:^|(?<=\s))(?:\S+\.)+\w{2,5}/(?:\S+)?"
perl.coords.use_nick_menu = "on"
perl.coords.xterm_compatible = "st-256color"
perl.highmon.alignment = "nchannel"
perl.highmon.away_only = "off"
perl.highmon.bar_lines = "10"
perl.highmon.bar_scrolldown = "off"
perl.highmon.color_buf = "on"
perl.highmon.first_run = "true"
perl.highmon.hotlist_show = "on"
perl.highmon.logging = "off"
perl.highmon.merge_private = "on"
perl.highmon.nick_prefix = "<"
perl.highmon.nick_suffix = ">"
perl.highmon.output = "buffer"
perl.highmon.short_names = "off"
perl.listsort.max_size = "100"
perl.mass_hl_blocker.limit = "5"
perl.menu.active_help = "off"
perl.mplex.away_msg = "Detached head"
perl.mplex.change_away_stat = "on"
perl.mplex.emit_signals = "off"
perl.mplex.exec_script_cmds = "on"
perl.mplex.interval = "60"
perl.mplex.verbose = "on"
perl.ncmpcpp.format = "/me is listening to: {%a "%b" (%y) - %t}|{%a - %t}|{%f}"
perl.newsbar.away_only = "off"
perl.newsbar.bar_auto_hide = "off"
perl.newsbar.bar_hidden_on_start = "0"
perl.newsbar.bar_name = "newsbar"
perl.newsbar.bar_seperator = "on"
perl.newsbar.bar_title = "Highlights"
perl.newsbar.bar_visible_lines = "2"
perl.newsbar.beep_cmd = "beep -f %F -l %L"
perl.newsbar.beep_duration = "20"
perl.newsbar.beep_freq_channel = "1000"
perl.newsbar.beep_freq_msg = "1000"
perl.newsbar.beep_freq_private = "1000"
perl.newsbar.beep_remote = "off"
perl.newsbar.beeps = "off"
perl.newsbar.blacklist_buffers = ".status,chanmon,highmon,urlbuf,pinebot,pineboat"
perl.newsbar.color_info_msg_tag = "cyan"
perl.newsbar.color_privmsg_tag = "red"
perl.newsbar.color_server_msg_tag = "magenta"
perl.newsbar.color_status_name = "white"
perl.newsbar.color_status_number = "yellow"
perl.newsbar.colored_help = "on"
perl.newsbar.debug = "off"
perl.newsbar.format_private = "%N@%s"
perl.newsbar.format_public = "%N.%C@%s"
perl.newsbar.highlights_current_channel = "on"
perl.newsbar.memo_tag_color = "yellow"
perl.newsbar.most_recent = "last"
perl.newsbar.nick_flood_max_nicks = "5"
perl.newsbar.nick_flood_protection = "on"
perl.newsbar.remove_bar_on_unload = "on"
perl.newsbar.show_highlights = "on"
perl.newsbar.show_priv_msg = "on"
perl.newsbar.show_priv_server_msg = "on"
perl.newsbar.ssh_host = "192.168.1.98"
perl.newsbar.ssh_key = "%h/.ssh/id_gpg"
perl.notify_send.command = "notify-send $type: $message"
perl.notify_send.ignore_nicks = ""
perl.notify_send.wait_highlight = "60"
perl.notify_send.wait_pm = "180"
perl.notifym.channel_whitelist = ".*"
perl.notifym.notify_channels = "off"
perl.notifym.notify_mentions = "on"
perl.notifym.notify_pv = "on"
perl.notifym.notify_servers = "off"
perl.notifym.server_whitelist = ".*"
perl.parse_relayed_msg.blacklist = ""
perl.parse_relayed_msg.debug = "off"
perl.parse_relayed_msg.nick_mode = "⇅"
perl.parse_relayed_msg.nick_mode_color = "yellow"
perl.parse_relayed_msg.relaynet_color = "blue"
perl.parse_relayed_msg.relaynet_to_nicklist = "off"
perl.parse_relayed_msg.servername = "i2p,freenet"
perl.parse_relayed_msg.supported_bot_names = "cloudrelay*,MultiRelay*,FLIPRelayBot*,i2pRelay,u2,uuu,RelayBot,lll,iRelay,fox,wolf,hawk,muninn,gribble,vulpine,*GitterBot"
perl.parse_relayed_msg.suppress_relaynet = "off"
perl.parse_relayed_msg.suppress_relaynet_channels = ""
perl.parse_relayed_msg.timer = "600"
perl.parse_relayed_msg.unexpected_msg_handling = "unchanged"
perl.pop3_mail.delete_passphrase_on_exit = "on"
perl.pop3_mail.passphrase = "enter passphrase"
perl.pop3_mail.pop3_list = "%h/pop3list.txt"
perl.pop3_mail.pop3_timeout = "20"
perl.pop3_mail.prefix_item = "✉:"
perl.pop3_mail.refresh = "10"
perl.pop3_mail.show_header = "From|Subject"
perl.spell_menu.complete_near = "on"
perl.spell_menu.complete_noend = "on"
perl.spell_menu.no_complete = "off"
perl.stalker.additional_join_info = "on"
perl.stalker.db_name = "%h/nicks.db"
perl.stalker.debug = "off"
perl.stalker.flood_max_nicks = "20"
perl.stalker.flood_timer = "10"
perl.stalker.guest_host_regex = "^webchat"
perl.stalker.guest_nick_regex = "^(guest|weebot|Floodbot|ChanServ).*"
perl.stalker.ignore_guest_hosts = "off"
perl.stalker.ignore_guest_nicks = "on"
perl.stalker.ignore_nickchange = "off"
perl.stalker.ignore_whois = "off"
perl.stalker.max_recursion = "20"
perl.stalker.normalize_nicks = "on"
perl.stalker.recursive_search = "on"
perl.stalker.search_this_network_only = "on"
perl.stalker.tags = ""
perl.stalker.timeout = "1"
perl.stalker.use_localvar = "off"
perl.stats_bar.stats_interface = "eth0"
perl.stats_bar.stats_refresh = "10"
perl.sysinfo.baritems = "memory"
perl.sysinfo.color = "default"
perl.sysinfo.nic = "eth0"
perl.sysinfo.nicname = "cable"
perl.sysinfo.refresh = "5"
perl.sysinfo.showbattery = "on"
perl.sysinfo.showcpu = "on"
perl.sysinfo.showdiskusage = "on"
perl.sysinfo.showdistro = "on"
perl.sysinfo.showhostname = "on"
perl.sysinfo.showloadaverage = "on"
perl.sysinfo.showmemoryusage = "on"
perl.sysinfo.shownetworktraffic = "on"
perl.sysinfo.showos = "on"
perl.sysinfo.showprocesses = "on"
perl.sysinfo.showuptime = "on"
perl.sysinfo.showusers = "on"
perl.sysinfo.text_battery = "Battery: "
perl.sysinfo.text_color = "default"
perl.sysinfo.text_cpu = "CPU: "
perl.sysinfo.text_diskusage = "Disk Usage: "
perl.sysinfo.text_distro = "Distro: "
perl.sysinfo.text_dummy = "-"
perl.sysinfo.text_hostname = "Host: "
perl.sysinfo.text_loadaverage = "Load Average: "
perl.sysinfo.text_memoryusage = "Memory Usage: "
perl.sysinfo.text_network = "Network: "
perl.sysinfo.text_os = "OS: "
perl.sysinfo.text_processes = "Processes: "
perl.sysinfo.text_uptime = "Uptime: "
perl.sysinfo.text_users = "Users: "
perl.sysinfo.useshorthostname = "on"
perl.topicsed.color_message = "green"
perl.topicsed.message = "edit Topic: "
perl.volumeter.device_name = "eth0"
perl.volumeter.display_char = "MiB"
perl.volumeter.refresh_rate = "5000"
python.announce_url_title.announce_public = "off"
python.announce_url_title.buffers = "madirc.#Elite,freetor.#chee-botabuse,znc/freenode.#chee-botabuse,madirc.#1337,"
python.announce_url_title.buffers_notice = "freetor.#chee-botabuse,"
python.announce_url_title.global = "off"
python.announce_url_title.global_prefix = "url"
python.announce_url_title.ignore_buffers = "grep,"
python.announce_url_title.prefix = "Title: "
python.announce_url_title.reannounce_wait = "0"
python.announce_url_title.suffix = ""
python.announce_url_title.title_max_length = "160"
python.announce_url_title.url_ignore = ""
python.announce_url_title.user_agent = "WeeChat/%(version)s (http://www.weechat.org)"
python.apply_corrections.check_every = "5"
python.apply_corrections.data_timeout = "60"
python.apply_corrections.message_limit = "2"
python.apply_corrections.print_format = "[nick]: [corrected]"
python.apply_corrections.print_limit = "1"
python.autojoin.autosave = "on"
python.autojoin_on_invite.autojoin_key = ""
python.autojoin_on_invite.ignore_channels = ""
python.autojoin_on_invite.ignore_nicks = ""
python.autojoin_on_invite.whitelist_channels = ""
python.autojoin_on_invite.whitelist_nicks = ""
python.autosavekey.add = "on"
python.autosavekey.mute = "off"
python.autosavekey.secure = "off"
python.bandwidth.device = "eth0"
python.bandwidth.format = "%N(↓%DV%DU/s ↑%UV%UU/s)"
python.bandwidth.refresh_rate = "5"
python.bandwidth.separator = " "
python.bitlbee_typing_notice.channel = "&bitlbee"
python.bitlbee_typing_notice.server = "bitlbee"
python.bitlbee_typing_notice.timeout = "4"
python.buffer_autoclose.age_limit = "30"
python.buffer_autoclose.ignore = ""
python.buffer_autoclose.interval = "1"
python.buffer_dmenu.dmenu.command = "dmenu -b -i -l 20"
python.buffer_dmenu.focus = "false"
python.buffer_dmenu.focus.wm = "i3"
python.buffer_dmenu.launcher = "dmenu"
python.buffer_dmenu.rofi.command = "rofi -p '# ' -dmenu -lines 10 -columns 8 -auto-select -mesg '<big>Pick a <b>buffer</b> to jump to:</big>'"
python.buffer_dmenu.title.regex = "WeeChat \d+\.\d+"
python.bufsize.count_filtered_lines = "on"
python.bufsize.format = "${color:yellow}%P${color:default}⋅%{${color:yellow}%A${color:default}⇵${color:yellow}%C${color:default}/}${color:yellow}%L"
python.bufsize.show_scroll = "on"
python.chanact.color_1 = "white"
python.chanact.color_2 = "cyan"
python.chanact.color_3 = "lightcyan"
python.chanact.color_4 = "yellow"
python.chanact.color_8 = "cyan"
python.chanact.color_default = "default"
python.chanact.delimiter = ","
python.chanact.item_length = "8"
python.chanact.lowest_priority = "2"
python.chanact.message = "Act: "
python.chanact.skip_number_binds = "on"
python.chanact.sort_by_number = "on"
python.chanact.use_keybindings = "on"
python.chanop.autodeop = "on"
python.chanop.autodeop_delay = "1"
python.chanop.default_banmask = "host"
python.chanop.display_affected = "on"
python.chanop.enable_bar = "on"
python.chanop.enable_multi_kick = "on"
python.chanop.enable_remove = "off"
python.chanop.kick_reason = ""
python.chanop.op_command = "/msg chanserv op $channel $nick"
python.chanop.watchlist.arch/freenode = "#chee-fanclub"
python.chanop.watchlist.freetor = "#chee-fanclub"
python.chanop.watchlist.znc/freenode = "#archlinux-lol-irc-super-s___post-magical-overload,#pbot2-offtopic,##offtopic-ontopic,#chee-fanclub,#archlinux-alyptik,#chee-botabuse,#archlinux-paid"
python.chanpriority.whitelist = ""
python.check_license = "off"
python.cmd_help.color_alias = "white"
python.cmd_help.color_alias_name = "green"
python.cmd_help.color_alias_value = "green"
python.cmd_help.color_arguments = "cyan"
python.cmd_help.color_delimiters = "lightgreen"
python.cmd_help.color_list = "green"
python.cmd_help.color_list_count = "white"
python.cmd_help.color_no_help = "red"
python.cmd_help.color_option_help = "brown"
python.cmd_help.color_option_name = "yellow"
python.cmd_help.display_no_help = "on"
python.cmd_help.format_option = "(${white:type}) ${description_nls}"
python.cmd_help.ignore_commands = "map,me,die,restart"
python.cmd_help.max_options = "5"
python.cmd_help.prefix = "["
python.cmd_help.right_align = "off"
python.cmd_help.right_padding = "15"
python.cmd_help.space = "2"
python.cmd_help.start_on_load = "off"
python.cmd_help.stop_on_enter = "on"
python.cmd_help.suffix = "]"
python.cmd_help.timer = "0"
python.completion.replace_values = "›"
python.confversion.auto_commit_ignore = "weechat.bar.nicklist.hidden"
python.confversion.commit_each_change = "true"
python.confversion.commit_message = "Commiting changes"
python.confversion.versioning_method = "git"
python.correction_completion.lang = "en"
python.country.show_in_whois = "on"
python.country.show_localtime = "off"
python.country.time_format = "%x %X %Z"
python.cron.auto_reload = "on"
python.cron.auto_save = "on"
python.cron.filename = "%h/cron.txt"
python.cron.quiet_exec = "off"
python.cron.quiet_load = "off"
python.cron.quiet_save = "on"
python.customize_bar.default.input = "[input_prompt]+(away),[input_search],[input_paste],input_text"
python.customize_bar.default.status = "[time],[buffer_last_number],[buffer_plugin],buffer_number+:+buffer_name+(buffer_modes)+{buffer_nicklist_count}+buffer_zoom+buffer_filter,scroll,[lag],[hotlist],completion"
python.customize_bar.default.title = "buffer_title"
python.go.auto_jump = "off"
python.go.buffer_number = "on"
python.go.color_name = "black,cyan"
python.go.color_name_highlight = "red,cyan"
python.go.color_name_highlight_selected = "red,brown"
python.go.color_name_selected = "black,brown"
python.go.color_number = "yellow,magenta"
python.go.color_number_selected = "yellow,red"
python.go.fuzzy_search = "off"
python.go.message = "Go to: "
python.go.short_name = "off"
python.go.sort = "number,beginning"
python.go.use_core_instead_weechat = "off"
python.grep.clear_buffer = "off"
python.grep.default_tail_head = "10"
python.grep.go_to_buffer = "on"
python.grep.log_filter = ""
python.grep.max_lines = "4000"
python.grep.show_summary = "on"
python.grep.size_limit = "2048"
python.grep.timeout_secs = "300"
python.grep_filter.bar_item = "grep"
python.grep_filter.enable = "on"
python.histman.buffer_close = "off"
python.histman.history_dir = "%h/history"
python.histman.min_length = "2"
python.histman.number = "0"
python.histman.pattern = "(.*password|.*nickserv|/quit)"
python.histman.rmodifier = "off"
python.histman.save = "all"
python.histman.save_global = "all"
python.histman.skip_double = "on"
python.histsearch.color_name = "black,cyan"
python.histsearch.color_name_highlight = "red,cyan"
python.histsearch.color_name_highlight_selected = "red,brown"
python.histsearch.color_name_selected = "black,brown"
python.histsearch.color_number = "yellow,magenta"
python.histsearch.color_number_selected = "yellow,red"
python.histsearch.display_selected_only = "false"
python.histsearch.message = "Command: "
python.hl_nicks.ignore_case = "on"
python.hl_nicks.ignore_list = "ChanServ,.*bot.*"
python.hl_nicks.ignore_self = "on"
python.hl_nicks.separator = ", "
python.hl_nicks.short_regex = "on"
python.hl_nicks.sort_nicks = "on"
python.hlpvitem.buffer_number = "on"
python.hlpvitem.buffer_short_name = "on"
python.hlpvitem.color_buffer_name = "default"
python.hlpvitem.color_buffer_number = ""
python.hlpvitem.color_delimiter = "cyan"
python.hlpvitem.color_message = "default"
python.hlpvitem.color_prefix = "white"
python.hlpvitem.color_string_highlight = ""
python.hlpvitem.color_string_private = ""
python.hlpvitem.highlight = "on"
python.hlpvitem.private = "on"
python.hlpvitem.show_all_buffers = "on"
python.hlpvitem.string_delimiter = " > "
python.hlpvitem.string_highlight = ""
python.hlpvitem.string_private = ""
python.hlpvitem.visible_seconds = "5"
python.ichatts.minutes_until_timestamp = "5"
python.ichatts.remind_every = "15"
python.inotify.color_nick = "on"
python.inotify.ignore_channel = ""
python.inotify.ignore_nick = "pineboat"
python.inotify.ignore_text = ""
python.inotify.passwd = ""
python.inotify.server_method = "any"
python.inotify.server_uri = "http://localhost:7766"
python.lastfm.command = "/me is listening to: %s"
python.lastfm.lastfm_username = "k1nch"
python.lastfm2.api_key = "ae51c9df97d4e90c35ffd302e987efd2"
python.lastfm2.api_url = "https://ws.audioscrobbler.com/2.0/?method=user.getRecentTracks&user={user}&limit=1&api_key={api_key}&format=json"
python.lastfm2.command = "/me is listening to: {track}"
python.lastfm2.command_arg = "/me is listening to: {track}"
python.lastfm2.timeout = "10000"
python.lastfm2.user = "k1nch"
python.latex_unicode.buffer = "on"
python.latex_unicode.input = "on"
python.latex_unicode.send = "on"
python.listbuffer.autofocus = "on"
python.listbuffer.channel_min_width = "25"
python.listbuffer.modes_min_width = "8"
python.listbuffer.sort_inverted = "on"
python.listbuffer.sort_order = "users"
python.listbuffer.users_min_width = "8"
python.lnotify.highlight = "on"
python.lnotify.icon = "weechat"
python.lnotify.notify_away = "off"
python.lnotify.query = "on"
python.maskmatch.blacklist = ""
python.maskmatch.disabled = "true"
python.maskmatch.ignore_masks = "*!*@*"
python.maskmatch.limit = "4"
python.maskmatch.match_set = "true"
python.maskmatch.match_unset = "true"
python.maskmatch.matching_modes = "bIqe"
python.maskmatch.prefix = "_script_name_"
python.maskmatch.prefix_color = "green"
python.maskmatch.print_as_list = "false"
python.maskmatch.sorting = "alpha_ignore_case"
python.maskmatch.verbose = "false"
python.maskmatch.whitelist = ""
python.mnotify.email_from = "irc <irc@localhost>"
python.mnotify.email_to = ""
python.mnotify.sendmail = "msmtp"
python.mnotify.show_channel_topic = "on"
python.mnotify.show_dcc = "on"
python.mnotify.show_highlighted_message = "on"
python.mnotify.show_invite_message = "on"
python.mnotify.show_notice_message = "off"
python.mnotify.show_private_action_message = "on"
python.mnotify.show_private_message = "on"
python.mnotify.show_public_action_message = "off"
python.mnotify.show_public_message = "off"
python.mnotify.show_server = "on"
python.mnotify.show_upgrade_ended = "on"
python.mnotify.sticky = "off"
python.mnotify.sticky_away = "on"
python.mpc.autoswitch = "0"
python.mpc.ch_pause = "||"
python.mpc.ch_play = ">>"
python.mpc.ch_stop = "--"
python.mpc.debug = "0"
python.mpc.format = "/me is listening to: $artist - $title_or_file [$album]"
python.mpc.host = "192.168.1.98"
python.mpc.password = ""
python.mpc.playinfo = "$pos: $artist : $title : $album : $track : $time"
python.mpc.port = "6600"
python.mpc.shortstats = "MPC : $state : $artist : $title"
python.mpc.verbose = "1"
python.mpv.message = "/me is listening to: "
python.mpv.mpv_socket = "/tmp/mpvsocket"
python.msg_command.buffer = "jabber.gtalk.otheraccount@otherserver.com"
python.notification.notification_icon = "weechat"
python.notification.notify_on_dcc_request = "on"
python.notification.notify_on_displayed_only = "on"
python.notification.notify_on_highlight = "on"
python.notification.notify_on_privmsg = "on"
python.notification.preferred_toolkit = ""
python.notification.status_icon = "weechat"
python.postpone.match_prefix = ""
python.postpone.message_on_nick = "off"
python.pyrnotify.host = "localhost"
python.pyrnotify.icon = "utilities-terminal"
python.pyrnotify.pm-icon = "emblem-favorite"
python.pyrnotify.port = "4321"
python.queue.core_output_only = "yes"
python.queue.rainbow_allow = "no"
python.queue.verbose = "yes"
python.spell_correction.auto_pop_up_item = "on"
python.spell_correction.auto_replace = "on"
python.spell_correction.catch_input_completion = "off"
python.spell_correction.complete_near = "0"
python.spell_correction.eat_input_char = "off"
python.spell_correction.hide_single_dict = "off"
python.spell_correction.replace_mode = "spell_suggest"
python.spell_correction.suggest_item = "${white}%S${default}"
python.spotify.buffers = "freenode.#mychan,"
python.spotify.emit_notice = "off"
python.stick_buffer.default_stick_window = ""
python.title.current_buffer_prefix = ""
python.title.current_buffer_suffix = ""
python.title.hotlist_buffer_prefix = ""
python.title.hotlist_buffer_suffix = ""
python.title.hotlist_number_prefix = ""
python.title.hotlist_number_suffix = ""
python.title.hotlist_separator = ":"
python.title.short_name = "on"
python.title.show_hotlist = "on"
python.title.title_prefix = "[weechat ${info:version}] "
python.title.title_priority = "2"
python.title.title_suffix = ""
python.tmux_env.exclude = ""
python.tmux_env.include = "*,-*"
python.tmux_env.interval = "30"
python.translate.from_to = "fr_en"
python.translate.marker = "&&"
python.translate.url = "http://translate.google.com/translate_a/t"
python.urlbar.ignore = "highmon,chanmon,urlbuf,grep,twitter_alyptik"
python.urlbar.remember_amount = "3"
python.urlbar.show_buffername = "on"
python.urlbar.show_index = "on"
python.urlbar.show_nick = "on"
python.urlbar.show_timestamp = "on"
python.urlbar.time_format = "%H:%M"
python.urlbar.use_popup = "off"
python.urlbar.visible_amount = "3"
python.urlbar.visible_seconds = "1"
python.urlbuf.display_active_buffer = "on"
python.urlbuf.display_buffer_number = "on"
python.urlbuf.display_nick = "on"
python.urlbuf.display_private = "on"
python.urlbuf.skip_buffers = "perl.chanmon,perl.highmon"
python.urlbuf.skip_duplicates = "on"
python.urlserver.buffer_short_name = "off"
python.urlserver.color = "darkgray"
python.urlserver.color_in_msg = ""
python.urlserver.debug = "off"
python.urlserver.display_urls = "off"
python.urlserver.display_urls_in_msg = "off"
python.urlserver.http_allowed_ips = ""
python.urlserver.http_auth = ""
python.urlserver.http_auth_redirect = "off"
python.urlserver.http_autostart = "on"
python.urlserver.http_bg_color = "#f4f4f4"
python.urlserver.http_css_url = ""
python.urlserver.http_embed_image = "off"
python.urlserver.http_embed_youtube = "off"
python.urlserver.http_embed_youtube_size = "480*350"
python.urlserver.http_fg_color = "#000"
python.urlserver.http_hostname = "192.168.1.98"
python.urlserver.http_hostname_display = ""
python.urlserver.http_open_in_new_page = "off"
python.urlserver.http_port = ""
python.urlserver.http_port_display = ""
python.urlserver.http_prefix_suffix = " "
python.urlserver.http_scheme_display = "http"
python.urlserver.http_time_format = "%d/%m/%y %H:%M:%S"
python.urlserver.http_title = "WeeChat URLs"
python.urlserver.http_url_prefix = ""
python.urlserver.msg_filtered = "off"
python.urlserver.msg_ignore_buffers = "core.weechat,python.urlbuf,python.grep"
python.urlserver.msg_ignore_dup_urls = "off"
python.urlserver.msg_ignore_regex = ""
python.urlserver.msg_ignore_tags = "irc_quit,irc_part,notify_none"
python.urlserver.msg_require_tags = ""
python.urlserver.separators = "[|]"
python.urlserver.url_min_length = "-1"
python.urlserver.urls_amount = "1000"
python.vimode.no_warn = "on"
python.weather.city = "Ewa Beach"
python.weather.interval = "10"
python.weather.language = "en"
python.weather.timeout = "10"
python.weatherbot.apikey = "be217d73985942f3"
python.weatherbot.enabled = "on"
python.weatherbot.trigger = "!weather"
python.weatherbot.units = "metric"
python.weempd.msg_head = "is listening to:"
python.weempd.spacer = " "
python.whois_on_query.command = "/whois $nick $nick"
python.whois_on_query.self_query = "on"
python.whowas_timeago.show_errors = "false"
python.zncnotice.prefix = "."
python.zncplayback.servers = "znc/voidnet,znc/freenode,znc/enjoy,znc/oftc,znc/mixxnet"
ruby.check_license = "off"
ruby.colorizer.buffer_regex = ""
ruby.colorizer.rule.0 = ""
ruby.colorizer.rule.1 = ""
ruby.colorizer.rule.2 = ""
ruby.colorizer.rule.3 = ""
ruby.colorizer.rule.4 = ""
ruby.colorizer.rule.count = "10"
ruby.hilites.beep_file = "/home/alyptik/.weechat/beep.ogg"
ruby.hilites.beep_on_hilight = "false"
ruby.hilites.beep_on_private = "false"
ruby.hilites.color1 = "435d65"
ruby.hilites.color2 = "6e98a4"
ruby.hilites.color3 = "d99918"
ruby.hilites.color4 = "909090"
ruby.hilites.color5 = "606060"
ruby.hilites.color6 = "ff4a5f"
ruby.hilites.pipe_path = "/home/alyptik/.weechat/pipe"
ruby.substitution.general_rule = ""
ruby.url_hinter.hintkeys = "jfhkgyuiopqwertnmzxcvblasd"
ruby.url_hinter.launcher = "open"
ruby.url_shorten.bitly_key = ""
ruby.url_shorten.bitly_login = ""
ruby.url_shorten.color = "red"
ruby.url_shorten.custom = "http://tinyurl.com/api-create.php?url=%s"
ruby.url_shorten.maxlen = "0"
ruby.url_shorten.shortener = ""
ruby.url_shorten.yourls_url = ""
tcl.chan_hl.default_list = ""
tcl.chan_hl.hl_on_cur_chan = "0"
tcl.check_license = "off"
tcl.xosdnotify.align = "center top"
tcl.xosdnotify.blink = "off"
tcl.xosdnotify.blink_count = "3"
tcl.xosdnotify.blink_interval = "750"
tcl.xosdnotify.color = "#ff005f"
tcl.xosdnotify.encoding = "utf-8"
tcl.xosdnotify.font = "-*-inconsolata-medium-*-*-*-30-*-*-*-*-*-utf8-*"
tcl.xosdnotify.lines = "1"
tcl.xosdnotify.offset = "0 256"
weenick.server_default.nickserv_failed = "access denied"
weenick.server_default.nickserv_ghost_killed = "ghost with your nick has been killed"
weenick.server_default.nickserv_identified = "password accepted"
weenick.server_default.nickserv_nick = "NickServ"
weenick.server_default.nickserv_registered = "nickname is registered"

[desc]
lua.emoji.incoming = "Also try to replace shortcodes to emoji in incoming messages (default: "on")"
lua.pastebuf.color_line = "Color for line content"
lua.pastebuf.color_line_number = "Color for line number"
lua.pastebuf.fetch_timeout = "Timeout for fetching URL (in milliseconds)"
lua.pastebuf.highlighter_timeout = "Timeout for syntax highlighter (in milliseconds)"
lua.pastebuf.open_unsupported_url = "Force open raw text of unsupported URL format"
lua.pastebuf.shell = "Location of your shell or just the shell name if it's already in $PATH"
lua.pastebuf.show_line_number = "Show line number"
lua.pastebuf.sticky_notes_retardness_level = "The retardness level of Sticky Notes API. Use level 0 if they somehow fixed their JSON string. Use level 1 to fix their awful JSON string first before decoding it. Use level 2 if level 1 failed fixing their JSON string. In level 2, we'll abandon their API and just fetch the raw paste. Default is 1."
lua.pastebuf.syntax_highlighter = "External command that will be used as syntax highlighter. $lang will be replaced by the name of syntax language"
lua.urlselect.buffer_name = "Type of name to use inside urlselect_buffer_name item. Valid values are "full", "normal", and "short""
lua.urlselect.buffer_name_color = "Color for buffer name"
lua.urlselect.buffer_number_color = "Color for buffer number"
lua.urlselect.help_color = "Color for help text"
lua.urlselect.highlight_color = "Nickname color for highlighted message"
lua.urlselect.index_color = "Color for URL index"
lua.urlselect.key_color = "Color for list of keys"
lua.urlselect.message_color = "Color for message text"
lua.urlselect.nick_color = "Color for nickname. Leave empty to use Weechat's nick color"
lua.urlselect.scan_merged_buffers = "Scan URLs from buffers that are merged with the current one"
lua.urlselect.search_prompt_color = "Color for search prompt"
lua.urlselect.search_scope = "Default search scope. Valid values are: url, msg, nick or nick+msg"
lua.urlselect.search_scope_color = "Color for current search scope"
lua.urlselect.status_color = "Color for status notification"
lua.urlselect.status_timeout = "Timeout for displaying status notification (in milliseconds)"
lua.urlselect.tags = "Comma separated list of tags. If not empty, script will only scan URLs from messages with any of these tags"
lua.urlselect.time_color = "Color for time"
lua.urlselect.time_format = "Format of time"
lua.urlselect.title_color = "Color for bar title"
lua.urlselect.url_color = "Color for URL"
lua.urlselect.use_simple_matching = "Use simple pattern matching when scanning for URLs"
perl.atcomplete.enabled = "enable completion of nicks starting with @ (default: "on")"
perl.beep.beep_command_dcc = "command for beep on dcc, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_highlight = "command for beep on highlight, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_pv = "command for beep on private message, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_timeout = "timeout for command run (in milliseconds, 0 = never kill (not recommended)) (default: "30000")"
perl.beep.beep_dcc = "beep on dcc (default: "on")"
perl.beep.beep_highlight = "beep on highlight (default: "on")"
perl.beep.beep_highlight_blacklist = "turn blacklist for highlights on or off (default: "off")"
perl.beep.beep_highlight_whitelist = "turn whitelist for highlights on or off (default: "off")"
perl.beep.beep_pv = "beep on private message (default: "on")"
perl.beep.beep_pv_blacklist = "turn blacklist for private messages on or off (default: "off")"
perl.beep.beep_pv_whitelist = "turn whitelist for private messages on or off (default: "off")"
perl.beep.beep_trigger_highlight = "word that will trigger execution of beep_command_highlight (if empty, anything will trigger) (default: "")"
perl.beep.beep_trigger_pv = "word that will trigger execution of beep_command_pv (it empty, anything will trigger) (default: "")"
perl.beep.bell_always = "use $bell on private messages and/or highlights regardless of trigger and whitelist settings (example: "pv,highlight") (default: "")"
perl.beep.blacklist_nicks = "comma-separated list of "server.nick": if not empty, these nicks will not be able to trigger execution of commands. Cannot be used in conjuction with whitelist (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.beep.whitelist_channels = "comma-separated list of "server.#channel": if not empty, only these channels will trigger execution of commands (example: "freenode.#weechat,freenode.#channel2") (default: "")"
perl.beep.whitelist_nicks = "comma-separated list of "server.nick": if not empty, only these nicks will trigger execution of commands (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.colorize_lines.blacklist_buffers = "Comma-separated list of channels to be ignored (e.g. freenode.#weechat,*.#python)"
perl.colorize_lines.buffers = "Buffer type affected by the script (all/channel/query, default: all)"
perl.colorize_lines.highlight = "Apply highlight color to the highlighted lines (off/on/nicks). The latter will limit highlighting to nicknames in option 'nicks'"
perl.colorize_lines.highlight_words = "highlight word(s) in text, matching word(s) in weechat.look.highlight"
perl.colorize_lines.highlight_words_color = "color for highlight word in text (fg:bg)"
perl.colorize_lines.ignore_tags = "Comma-separated list of tags to ignore (see /debug tags)"
perl.colorize_lines.lines = "Apply nickname color to the lines (off/on/nicks). The latter will limit highlighting to nicknames in option 'nicks'"
perl.colorize_lines.nicks = "Comma-separater list of nicks (e.g. freenode.cat,*.dog) OR file name starting with '/' (e.g. /file.txt). In the latter case, nicknames will get loaded from that file inside weechat folder (e.g. from ~/.weechat/file.txt). Nicknames in file are newline-separated (e.g. freenode.dog\n*.cat)"
perl.colorize_lines.own_lines = "Apply nickname color to own lines (off/on/only). The latter turns off all other kinds of coloring altogether"
perl.colorize_lines.tags = "Comma-separated list of tags to accept (see /debug tags)"
perl.coords.clipboard_command = "if you set this, an external program may be executed to store the selection or URL. begin with | to pipe into program or use parameters %s for text, %q for quoted text or %x for quoted escape sequence."
perl.coords.color.selection = "the color of the currently selected text in selection mode"
perl.coords.color.selection_cursor = "the weechat color and/or attribute to be used for the text cursor."
perl.coords.color.url_highlight = "the weechat color and/or attribute to be used for highlighting URLs in the copy window. seperate multiple attributes with ."
perl.coords.color.url_highlight_active = "the same as color.url_highlight except for the currently (using arrow keys) selected link."
perl.coords.copybuf_short_name = "short_name to use for coords buffer. it is set to the copy sign by default to not disturb buffers bar width, set to the empty string to have window position and size shown"
perl.coords.copywin_custom_keys = "You can define custom key bindings to use inside the copywin here. syntax is: command-letter:weechat-keycode. available commands: -+>< (up/down/left/right) fbae (forward word/backward word/beginning/end) !@ (open/start selection) /UNCunc (toggle highlights/urls/nicks/channels) q (close window)"
perl.coords.hyper_channels = "make channels to hyperlinks for join"
perl.coords.hyper_nicks = "make nicks to hyperlinks for menu/pm"
perl.coords.hyper_show = "set to types of hyperlinks that are shown by default"
perl.coords.mouse.click_select_pane = "set to on to use the mouse to select windows"
perl.coords.mouse.click_through_pane = "set to on if copy_on_click should work on inactive windows (works only if click_select_pane is set too). set to off if window needs to be active"
perl.coords.mouse.close_on_release = "set to on or a delay (in ms) to autoclose coords buffer opened by copy_on_click on button release, set to off if the coords buffer should stay open after click"
perl.coords.mouse.copy_on_click = "set to on if it should be possible to directly click on URLs and select text, set to off if mouse should only work in open coords buffer"
perl.coords.mouse.handle_scroll = "set to on if coords should handle scrolling inside windows. the script will try to guess non-chat areas to be nicklist, top to be title and bottom to be status and scroll the respective bars if the cursor is in that area. set to off if scrolling should be handled by the default mouse.pl script or another mouse scrolling script"
perl.coords.mouse.scroll_inactive_pane = "set to on if inactive windows should be scrolled instead of active window if the mouse cursor is over it (requires handle_scroll to be enabled)"
perl.coords.mouse.url_open_2nd_click = "if this is set, URLs are only opened when clicked twice (in the same incarnation of a coords buffer) instead of on first click. it can be set to a delay (in ms) that will be added to the close_on_release delay if the script is waiting for a second click on the URL to happen"
perl.coords.url_braces = "parenthesis-like characters which nest and should be excluded when found around an URL. make sure the variable setting nests properly when modifying this."
perl.coords.url_non_endings = "this is matched against the end of a link and removed"
perl.coords.url_regex = "a regular expression to identify URLs in the text. See perlre for more information about Perl regular expressions."
perl.coords.use_nick_menu = "use nick menu when opening nick hyperlink (see hyper_nicks, requires menu.pl script). otherwise open private message. this setting only applies to text mode selection, for mouse see mouse.nick_2nd_click"
perl.listsort.max_size = "maximum size of /list output in kilobytes to be handled"
perl.mass_hl_blocker.limit = "minimum amount of nicks in line to disable highlight (default: 5)"
perl.menu.active_help = "this setting is documented for completeness, it reflects if the help bar is visible and can be toggled from within the menu with Ctrl+H."
perl.menu.key_binding_hidden = "if set to on, the friendly reminder how to open the main menu (by default: /menu to open menu) will be removed from view. useful for those people bothered by it."
perl.menu.main_menu_hidden = "if set to on, the main menu bar will be always hidden. useful if you don't care about clicking on the main menu and want to save one line on your screen (due to internal reasons, the setting weechat.bar.main_menu.hidden does not work reliably, use this instead.)"
perl.menu.sticky_menu = "if this is set to on, a submenu is not closed when the entry is confirmed but has to be closed manually using Ctrl+X."
perl.notify_send.command = "systemcommand to be executed ($type, $name, and $messagewill be interpreted as values) (default: "notify-send $type: $name &>/dev/null")"
perl.notify_send.ignore_nicks = "comma-separated list of nicks to ignore (default: "")"
perl.notify_send.wait_highlight = "necessary time delay between highlights(seconds) for command to be executed (default: "60")"
perl.notify_send.wait_pm = "necessary time delay between private messages(seconds) for command to be executed (default: "180")"
perl.notifym.channel_whitelist = "Channel white-list. (perl regex required) (default: ".*")"
perl.notifym.notify_channels = "Notify all messages from whitelisted channels. (default: "off")"
perl.notifym.notify_mentions = "Notify on mention in all channel. (default: "on")"
perl.notifym.notify_pv = "Notify on private message. (default: "on")"
perl.notifym.notify_servers = "Notify all messages from whitelisted servers. (default: "off")"
perl.notifym.server_whitelist = "Server white-list. (perl regex required) (default: ".*")"
perl.parse_relayed_msg.blacklist = "Comma-separated list of relayed nicknames to be ignored (similar to /ignore). The format is case-sensitive: <server>.<relaynick>"
perl.parse_relayed_msg.debug = "Enable output of raw IRC messages. This is a developer feature and should generally be turned off. The format is:  <servername>:<botname> (default: off)"
perl.parse_relayed_msg.nick_mode = "Prefix character used to mark relayed nicknames. (default: ⇅). Since WeeChat 0.4.2 you can use format ${color:xxx} but this doesn't affect nicklist."
perl.parse_relayed_msg.nick_mode_color = "Color of the prefix character. (default: yellow)"
perl.parse_relayed_msg.relaynet_color = "Color of nicknames' network part. Leave blank for altering colors. (default: "")"
perl.parse_relayed_msg.relaynet_to_nicklist = "Include relaynets in the nicklist. (default: off)"
perl.parse_relayed_msg.servername = "Comma-separated list of internal servers to enable parse_relayed_msg for. (default: i2p,freenet)"
perl.parse_relayed_msg.supported_bot_names = "Comma-separated list of relay bots."
perl.parse_relayed_msg.suppress_relaynet = "Hide nicknames' network part (if applicable). (default: off)"
perl.parse_relayed_msg.suppress_relaynet_channels = "Comma-separated list of channels to activate suppress_relaynet in. Format: "servername.channel", e.g. "i2p.#i2p-dev,freenode.#weechat". (default: "" (i.e. global))"
perl.parse_relayed_msg.timer = "Time (in s) after which relayed nicknames get removed from the nicklist. (default: 600)"
perl.parse_relayed_msg.unexpected_msg_handling = "Ignore relay bot messages with unexpected syntax (drop/unchanged). (default: unchanged)"
perl.spell_menu.complete_near = "only use tab complete to open the menu if the cursor is next to the wrong word"
perl.spell_menu.complete_noend = "don't spell correct with tab if exactly at the end of a word"
perl.spell_menu.no_complete = "don't open the spell menu on tab completion. make a binding yourself to call /spell_menu, for example"
perl.stalker.additional_join_info = "add a line below the JOIN message that will display alternative nicks (tags: "irc_join", "irc_smart_filter" will be add to additional_join_info). You can use a localvar to drop additional join info for specific buffer(s) "stalker_drop_additional_join_info" (default: off)"
perl.stalker.db_name = "file containing the SQLite database where information is recorded. This database is created on loading of stalker if it does not exist. ("%h" will be replaced by WeeChat home, "~/.weechat" by default) (default: %h/nicks.db)"
perl.stalker.debug = "Prints debug output to core buffer so you know exactly what is going on. This is far too verbose to be enabled when not actively debugging something. (default: off)"
perl.stalker.flood_max_nicks = "Maximum number of joins to allow in flood_timer length of time. Once maximum number of joins is reached, joins will be ignored until the timer ends (default:20)"
perl.stalker.flood_timer = "Time in seconds for which flood protection is active. Once max_nicks is reached, joins will be ignored for the remaining duration of the timer. (default:10)"
perl.stalker.guest_host_regex = "regex mask to ignore host masks"
perl.stalker.guest_nick_regex = "Some networks set default nicknames when a user fails to identify to nickserv, other networks using relay-bots, some irc clients set default nicknames when someone connects and often these change from network to network depending on who is configuring the java irc clients. This allows a regular expression to be entered. When a nickname matches the regular expression and "ignore_guest_nicks" is enabled the nickname is dropped from the search as if it had never been seen. (default: ^(guest|weebot|Floodbot).*)"
perl.stalker.ignore_guest_hosts = "See option guest_host_regex"
perl.stalker.ignore_guest_nicks = "See option guest_nick_regex"
perl.stalker.ignore_nickchange = "When enabled, /NICK changes won't be monitored. (default: off)"
perl.stalker.ignore_whois = "When enabled, /WHOIS won't be monitored. (default: off)"
perl.stalker.max_recursion = "For each correlation between nick <-> host that happens, one point of recursion happens. A corrupt database, general evilness, or misfortune can cause the recursion to skyrocket. This is a ceiling number that says if after this many correlation attempts we have not found all nickname and hostname correlations, stop the process and return the list to this point. Use this option with care on slower machines like raspberry pi."
perl.stalker.normalize_nicks = "this option will truncate special chars from username (like: ~) (default: on)"
perl.stalker.recursive_search = "When enabled, recursive search causes stalker to function better than a simple hostname to nickname map. Disabling the recursive search in effect turns stalker into a more standard hostname -> nickname map."
perl.stalker.search_this_network_only = "When enabled searches are limited to within the network the window is currently set on. Turning this off is really only useful if multiple networks don't encode the hostmask. (default: on)"
perl.stalker.tags = "comma separated list of tags used for messages printed by stalker. See documentation for possible tags (e.g. 'no_log', 'no_highlight'). This option does not effect DEBUG messages."
perl.stalker.timeout = "timeout in seconds for hook_process(), used with option "additional_join_info". On slower machines, like raspberry pi, increase time. (default: 1)"
perl.stalker.use_localvar = "When enabled, only channels with a localvar 'stalker' will be monitored. This option will not affect /NICK and /WHOIS monitoring. It's only for /JOIN messages. (default: off)"
perl.sysinfo.baritems = "comma separated list with name(s) of systeminformation to be displayed in a bar"
perl.sysinfo.color = "color for optionsname"
perl.sysinfo.nic = "comma separated list to specify your NIC interface name(s) (wlan0,eth0,etc)"
perl.sysinfo.nicname = "comma separated list with name(s) for interface(s) (wireless,cable,etc)"
perl.sysinfo.refresh = "refresh rate in seconds for info-bar (0 means off)"
perl.sysinfo.text_color = "text color for results"
perl.sysinfo.text_dummy = "separator between different options"
python.apply_corrections.check_every = "Interval between each check for expired messages."
python.apply_corrections.data_timeout = "Time before a message is expired."
python.apply_corrections.message_limit = "Number of messages to store per nick."
python.apply_corrections.print_format = "Format string for the printed corrections."
python.apply_corrections.print_limit = "Maximum number of lines to correct."
python.autosavekey.add = "adds channel and key to autojoin list on /join, if channel/key does not already exists (default: "off")"
python.autosavekey.mute = "execute command silently, only error messages will be displayed. (default: "off")"
python.autosavekey.secure = "change channel key in secure data. (default: "off")"
python.bandwidth.device = "Network interface(s) to monitor, in order, separated by ';'"
python.bandwidth.format = "Output formatting: %N = network interface, %DV = downstream value, %DU = downstream units (K or M), %UV = upstream value, %UU = upstream units (K or M).  Note: default setting uses UTF-8"
python.bandwidth.refresh_rate = "Refresh rate in seconds"
python.bandwidth.separator = "String displayed between output for multiple devices"
python.buffer_dmenu.dmenu.command = "command used to call dmenu (default: "dmenu -b -i -l 20")"
python.buffer_dmenu.focus = "whether to immediately focus the terminal after selecting buffer (default: "false")"
python.buffer_dmenu.focus.wm = "wm focus logic to use (supported: i3) (default: "i3")"
python.buffer_dmenu.launcher = "launcher to use (supported: dmenu/rofi) (default: "dmenu")"
python.buffer_dmenu.rofi.command = "command used to call rofi (default: "rofi -p '# ' -dmenu -lines 10 -columns 8 -auto-select -mesg '<big>Pick a <b>buffer</b> to jump to:</big>'")"
python.buffer_dmenu.title.regex = "regex used to match weechat's title window (default: "WeeChat \d+\.\d+")"
python.bufsize.count_filtered_lines = "filtered lines will be count in item. (default: 'on')"
python.bufsize.format = "format for items to display in bar, possible items: %P = percent indicator, %A = number of lines below last line, %L = lines counter, %C = current line %F = number of filtered lines (note: using WeeChat >= 0.4.2, content is evaluated, so you can use colors with format "${color:xxx}", see /help eval) (default: '${color:yellow}%P${color:default}⋅%{${color:yellow}%A${color:default}⇵${color:yellow}%C${color:default}/}${color:yellow}%L')"
python.bufsize.show_scroll = "always show the scroll indicator number,even if its 0 (item %A), if option is off the scroll indicator will be hidden like the item "scroll" (default: 'on')"
python.cmd_help.color_alias = "color for text "Alias" (default: "white")"
python.cmd_help.color_alias_name = "color for alias name (default: "green")"
python.cmd_help.color_alias_value = "color for alias value (default: "green")"
python.cmd_help.color_arguments = "color for command arguments (default: "cyan")"
python.cmd_help.color_delimiters = "color for delimiters (default: "lightgreen")"
python.cmd_help.color_list = "color for list of commands/options (default: "green")"
python.cmd_help.color_list_count = "color for number of commands/options in list found (default: "white")"
python.cmd_help.color_no_help = "color for text "No help" (default: "red")"
python.cmd_help.color_option_help = "color for help on option (default: "brown")"
python.cmd_help.color_option_name = "color for name of option found (by adding "*" to option name) (default: "yellow")"
python.cmd_help.display_no_help = "display "No help" when command is not found (default: "on")"
python.cmd_help.format_option = "format of help for options: free text with identifiers using format: ${name} or ${color:name}: color is a WeeChat color (optional), name is a field of infolist "option": full_name, config_name, section_name, option_name, parent_name, description, description_nls, string_values, min, max, null_value_allowed, value_is_null, default_value_is_null, type, value, default_value (default: "(${white:type}) ${description_nls}")"
python.cmd_help.ignore_commands = "comma-separated list of commands (without leading "/") to ignore (default: "map,me,die,restart")"
python.cmd_help.max_options = "max number of options displayed in list (default: "5")"
python.cmd_help.prefix = "string displayed before help (default: "[")"
python.cmd_help.right_align = "align help to right (default: "off")"
python.cmd_help.right_padding = "padding to right when aligned to right (default: "15")"
python.cmd_help.space = "minimum space before help (default: "2")"
python.cmd_help.start_on_load = "auto start help when script is loaded (default: "off")"
python.cmd_help.stop_on_enter = "enter key stop help (default: "on")"
python.cmd_help.suffix = "string displayed after help (default: "]")"
python.cmd_help.timer = "number of seconds help is displayed (0 = display until help is toggled) (default: "0")"
python.go.auto_jump = "automatically jump to buffer when it is uniquely selected (default: "off")"
python.go.buffer_number = "display buffer number (default: "on")"
python.go.color_name = "color for buffer name (not selected) (default: "black,cyan")"
python.go.color_name_highlight = "color for highlight in buffer name (not selected) (default: "red,cyan")"
python.go.color_name_highlight_selected = "color for highlight in a selected buffer name (default: "red,brown")"
python.go.color_name_selected = "color for a selected buffer name (default: "black,brown")"
python.go.color_number = "color for buffer number (not selected) (default: "yellow,magenta")"
python.go.color_number_selected = "color for selected buffer number (default: "yellow,red")"
python.go.fuzzy_search = "search buffer matches using approximation (default: "off")"
python.go.message = "message to display before list of buffers (default: "Go to: ")"
python.go.short_name = "display and search in short names instead of buffer name (default: "off")"
python.go.sort = "comma-separated list of keys to sort buffers (the order is important, sorts are performed in the given order): name = sort by name (or short name),  (default: "number,beginning")"
python.go.use_core_instead_weechat = "use name "core" instead of "weechat" for core buffer (default: "off")"
python.grep_filter.bar_item = "text to show in bar item when filtering (default: "grep")"
python.grep_filter.enable = "enable automatically start filtering when searching (default: "off")"
python.histman.buffer_close = "save command history, when buffer will be closed (default: off) (default: "off")"
python.histman.history_dir = "locale cache directory for history files ("%h" will be replaced by WeeChat home, "~/.weechat" by default) (default: "%h/history")"
python.histman.min_length = "minimum length of command/text (default: 2) (default: "2")"
python.histman.number = "number of history commands/text to save. A positive number will save from oldest to latest, a negative number will save from latest to oldest. 0 = save whole history (e.g. -10 will save the last 10 history entries (default: "0")"
python.histman.pattern = "a simple regex to ignore commands/text. Empty value disable pattern matching (default: "(.*password|.*nickserv|/quit)")"
python.histman.rmodifier = "use rmodifier options to ignore commands/text (default:off) (default: "off")"
python.histman.save = "define what should be save from history. Possible values are "command", "text", "all". This is a fallback option (see /help histman) (default: "all")"
python.histman.save_global = "save global history, possible values are "command", "text", "all" or "off"(default: off) (default: "off")"
python.histman.skip_double = "skip lines that already exists (case sensitive) (default: "on")"
python.latex_unicode.buffer = "replace LaTeX in buffer: off, on (default: "on")"
python.latex_unicode.input = "replace LaTeX in input display: off, on (default: "on")"
python.latex_unicode.send = "replace LaTeX in input sending: off, on (default: "on")"
python.listbuffer.autofocus = "Focus the listbuffer in the current window if it isn't already displayed by a window."
python.listbuffer.channel_min_width = "The minimum width used for the channel name in the channel list. If a channelname is shorter than this amount, the column will be padded with spaces."
python.listbuffer.modes_min_width = "The minimum width used for modes in the channel list. If a channel has less modes than this amount, the column will be padded with spaces."
python.listbuffer.sort_inverted = "Invert the sort order for the channel list."
python.listbuffer.sort_order = "Last used sort order for the channel list."
python.listbuffer.users_min_width = "The minimum width used for the usercount in the channel list. If the usercount has less digits than this amount, the column will be padded with spaces."
python.maskmatch.blacklist = "List of servers, channels, or server.channel combinations this should not be done for (whitelist takes precedence). Comma separated string"
python.maskmatch.disabled = "Set this to true to entirely disable mode matching, and just allow use for the /maskmatch command. Boolean"
python.maskmatch.ignore_masks = "Hostmasks that are too broad that should be ignored. Comma separated string"
python.maskmatch.limit = "How many matches should be displayed at maximum? Number"
python.maskmatch.match_set = "Match when a mode gets set. Boolean"
python.maskmatch.match_unset = "Match when a mode gets unset. Boolean"
python.maskmatch.matching_modes = "List of mode characters to match on, every character represents a mode."
python.maskmatch.prefix = "The name the script will have. Special options: _script_name_, _prefix_network_, _setter_, _target_"
python.maskmatch.prefix_color = "The colour the prefix will have. If prefix is wrapped in brackets, the brackets will have this color. Any weechat-supported color"
python.maskmatch.print_as_list = "Print as one large list, less information - but can fit more names at cost of readability. Boolean"
python.maskmatch.sorting = "Sort names alphabetically or not. none, alpha, or alpha_ignore_case"
python.maskmatch.verbose = "Print also if no matches are found. Boolean"
python.maskmatch.whitelist = "List of servers, channels, or server.channel combinations this should be done for. Comma separated string"
python.notification.notification_icon = "path or name of the icon shown in notifications (default: "weechat")"
python.notification.notify_on_dcc_request = "notify on DCC requests (default: "on")"
python.notification.notify_on_displayed_only = "only notify of messages that are actually displayed (default: "on")"
python.notification.notify_on_highlight = "notify when a messages is highlighted (default: "on")"
python.notification.notify_on_privmsg = "notify when receiving a private message (default: "on")"
python.notification.preferred_toolkit = "preferred UI toolkit (default: "")"
python.notification.status_icon = "path or name of the status icon (default: "weechat")"
python.postpone.match_prefix = "Postpone message if prefix before "nick:" is matched. (Default: "")"
python.postpone.message_on_nick = "Send message on /nick in addition to /join (Default: off)"
python.spell_correction.auto_pop_up_item = "automatic pop-up suggestion item on a misspelled word (default: "off")"
python.spell_correction.auto_replace = "replaces misspelled word with selected suggestion, automatically. If you use "off" you will have to bind command "/spell_correction replace" to a key (default: "on")"
python.spell_correction.catch_input_completion = "will catch the input_complete commands [TAB-key] (default: "on")"
python.spell_correction.complete_near = "show suggestions item only if you are n-chars near the misspelled word (0 = off). Using 'replace_mode' cursor has to be n-chars near misspelled word to cycle through suggestions. (default: "0")"
python.spell_correction.eat_input_char = "will eat the next char you type, after replacing a misspelled word (default: "on")"
python.spell_correction.hide_single_dict = "will hide dict in item if you have a single dict for buffer only (default: "on")"
python.spell_correction.replace_mode = "misspelled word will be replaced directly by suggestions. Use option 'complete_near' to specify range and item 'spell_suggest' to show possible suggestions. (default: "off")"
python.spell_correction.suggest_item = "item format (%S = suggestion, %D = dict). Colors are allowed with format "${color}". note: since WeeChat 0.4.2 content is evaluated, see /help eval. (default: "${white}%S${default}")"
python.spotify.buffers = "A comma separated list of buffers the script should check"
python.spotify.emit_notice = "If on, this script will use /notice, if off, it will use /msg to post info"
python.stick_buffer.default_stick_window = "The default window to stick a buffer to if no localvar stick_buffer_to_window is set (default: "")"
python.urlbuf.display_active_buffer = "display URLs from the active buffer"
python.urlbuf.display_buffer_number = "display the buffer's number"
python.urlbuf.display_nick = "display the nick of the user"
python.urlbuf.display_private = "display URLs from private messages"
python.urlbuf.skip_buffers = "a comma separated list of buffer numbers to skip"
python.urlbuf.skip_duplicates = "skip the URL that is already in the urlbuf"
python.urlserver.buffer_short_name = "use buffer short name on dedicated buffer (default: "off")"
python.urlserver.color = "color for urls displayed after message (default: "darkgray")"
python.urlserver.color_in_msg = "color for urls displayed inside irc message: it is a number (irc color) between 00 and 15 (see doc for a list of irc colors) (default: "")"
python.urlserver.debug = "print some debug messages (default: "off")"
python.urlserver.display_urls = "display URLs below messages (default: "on")"
python.urlserver.display_urls_in_msg = "add shorten url next to the original url (only in IRC messages) (useful for urlserver behind relay/irc) (default: "off")"
python.urlserver.http_allowed_ips = "regex for IPs allowed to use server (example: "^(123.45.67.89|192.160.*)$") (default: "")"
python.urlserver.http_auth = "login and password (format: "login:password") required to access to page with list of URLs (note: content is evaluated, see /help eval) (default: "")"
python.urlserver.http_auth_redirect = "require the login/password (if option "http_auth" is set) for URLs redirections (default: "on")"
python.urlserver.http_autostart = "start the built-in HTTP server automatically) (default: "on")"
python.urlserver.http_bg_color = "background color for HTML page (default: "#f4f4f4")"
python.urlserver.http_css_url = "URL of external Cascading Style Sheet to add (BE CAREFUL: the HTTP referer will be sent to site hosting CSS file!) (empty value = use default embedded CSS) (default: "")"
python.urlserver.http_embed_image = "embed images in HTML page (BE CAREFUL: the HTTP referer will be sent to site hosting image!) (default: "off")"
python.urlserver.http_embed_youtube = "embed youtube videos in HTML page (BE CAREFUL: the HTTP referer will be sent to youtube!) (default: "off")"
python.urlserver.http_embed_youtube_size = "size for embedded youtube video, format is "xxx*yyy" (default: "480*350")"
python.urlserver.http_fg_color = "foreground color for HTML page (default: "#000")"
python.urlserver.http_hostname = "force hostname/IP in bind of socket (empty value = auto-detect current hostname) (default: "")"
python.urlserver.http_hostname_display = "display this hostname in shortened URLs (default: "")"
python.urlserver.http_open_in_new_page = "open links in new pages/tabs (default: "on")"
python.urlserver.http_port = "force port for listening (empty value = find a random free port) (default: "")"
python.urlserver.http_port_display = "display this port in shortened URLs. Useful if you forward a different external port to the internal port (default: "")"
python.urlserver.http_prefix_suffix = "suffix displayed between prefix and message in HTML page (default: " ")"
python.urlserver.http_scheme_display = "display this scheme in shortened URLs (default: "http")"
python.urlserver.http_time_format = "time format in the HTML page (default: "%d/%m/%y %H:%M:%S")"
python.urlserver.http_title = "title of the HTML page (default: "WeeChat URLs")"
python.urlserver.http_url_prefix = "prefix to add in URLs to prevent external people to scan your URLs (for example: prefix "xx" will give URL: http://host.com:1234/xx/8) (default: "")"
python.urlserver.msg_filtered = "shorten URLs in filtered messages (with /filter) (default: "off")"
python.urlserver.msg_ignore_buffers = "comma-separated list (without spaces) of buffers to ignore (full name like "irc.freenode.#weechat") (default: "core.weechat,python.grep")"
python.urlserver.msg_ignore_dup_urls = "ignore duplicated URLs (do not add an URL in list if it is already) (default: "off")"
python.urlserver.msg_ignore_regex = "ignore messages matching this regex (default: "")"
python.urlserver.msg_ignore_tags = "comma-separated list (without spaces) of tags (or beginning of tags) to ignore (for example, use "notify_none" to ignore self messages or "nick_weebot" to ignore messages from nick "weebot") (default: "irc_quit,irc_part,notify_none")"
python.urlserver.msg_require_tags = "comma-separated list (without spaces) of tags (or beginning of tags) required to shorten URLs (for example "nick_" to shorten URLs only in messages from other users) (default: "nick_")"
python.urlserver.separators = "separators for short url list (string with exactly 3 chars) (default: "[|]")"
python.urlserver.url_min_length = "minimum length for an URL to be shortened (0 = shorten all URLs, -1 = detect length based on shorten URL) (default: "0")"
python.urlserver.urls_amount = "number of URLs to keep in memory (and in file when script is not loaded) (default: "100")"
python.vimode.no_warn = "don't warn about problematickeybindings and tmux/screen (default: "off")"
python.whois_on_query.command = "the command sent to do the whois ($nick is replaced by nick) (default: "/whois $nick $nick")"
python.whois_on_query.self_query = "if on, send whois for self queries (default: "off")"
python.whowas_timeago.show_errors = "Display error messages when timestamp cannot be parsed. true or false"
python.zncnotice.prefix = "The nickname prefix used by ZNC for its psuedo-users. Usually * but can be changed to something else. Must match the ZNC configuration. (default: "*")"
python.zncplayback.servers = "Comma-separated list of servers that playback should be fetched for (default: "")"
ruby.colorizer.buffer_regex = "Only colorize text in buffers with names that match this regex. Leaving this empty matches all buffer names."
ruby.colorizer.rule.0 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.1 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.2 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.3 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.4 = "A colorizing rule of the form: <regular_expression>/<weechat_color_name> Empty rules are ignored."
ruby.colorizer.rule.count = "The maximum number of rules to look for in your config."
weenick.server_default.command = "command(s) to get processed upon identification"
weenick.server_default.nick = "registered nickname"
weenick.server_default.nickserv_failed = "string to identify notice that password is wrong"
weenick.server_default.nickserv_ghost_killed = "string to identify notice that ghost was killed"
weenick.server_default.nickserv_identified = "string to identify notice that nick was identified"
weenick.server_default.nickserv_nick = "nickname to send messages to"
weenick.server_default.nickserv_registered = "string to identify notice that nick is registered"
weenick.server_default.password = "password to identify/kill ghosts"
