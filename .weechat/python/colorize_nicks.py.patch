diff --git a/colorize_nicks.py b/colorize_nicks.py
index 55b1b2fc279987ed55..6b2c5ad2ad60650f75 100644
--- a/colorize_nicks.py
+++ b/colorize_nicks.py
@@ -87,7 +87,7 @@ SCRIPT_DESC    = "Use the weechat nick colors in the chat area"
 
 # Based on the recommendations in RFC 7613. A valid nick is composed
 # of anything but " ,*?.!@".
-VALID_NICK = r'([@~&!%+:​-])?([^\s,\*\?\.!@:\'"%#\&]+›?)'
+VALID_NICK = r'([@~&!%+-])?([^\s,\*\?\.!@:›»%#\&\'"\+]*[^\s,\*\?\.!@:›»%#\&\'"\+\]])'
 valid_nick_re = re.compile(VALID_NICK)
 ignore_channels = []
 ignore_nicks = []
@@ -129,7 +129,7 @@ def colorize_config_init():
     colorize_config_option["min_nick_length"] = weechat.config_new_option(
         colorize_config_file, section_look, "min_nick_length",
         "integer", "Minimum length nick to colorize", "",
-        2, 20, "", "", 0, "", "", "", "", "", "")
+        1, 20, "", "", 0, "", "", "", "", "", "")
     colorize_config_option["colorize_input"] = weechat.config_new_option(
         colorize_config_file, section_look, "colorize_input",
         "boolean", "Whether to colorize input", "", 0,
@@ -142,6 +142,10 @@ def colorize_config_init():
         colorize_config_file, section_look, "greedy_matching",
         "boolean", "If off, then use lazy matching instead", "", 0,
         0, "on", "on", 0, "", "", "", "", "", "")
+    colorize_config_option["match_limit"] = weechat.config_new_option(
+        colorize_config_file, section_look, "match_limit",
+        "integer", "Fall back to lazy matching if greedy matches exceeds this number", "",
+        20, 1000, "", "", 0, "", "", "", "", "", "")
     colorize_config_option["ignore_nicks_in_urls"] = weechat.config_new_option(
         colorize_config_file, section_look, "ignore_nicks_in_urls",
         "boolean", "If on, don't colorize nicks inside URLs", "", 0,
@@ -212,33 +216,50 @@ def colorize_cb(data, modifier, modifier_data, line):
         if nick in colored_nicks[buffer]:
             nick_color = colored_nicks[buffer][nick]
 
-            # Let's use greedy matching. Will check against every word in a line.
-            if w.config_boolean(colorize_config_option['greedy_matching']):
-                for word in line.split():
-                    if w.config_boolean(colorize_config_option['ignore_nicks_in_urls']) and \
-                          word.startswith(('http://', 'https://')):
-                        continue
+            try:
+                # Let's use greedy matching. Will check against every word in a line.
+                if w.config_boolean(colorize_config_option['greedy_matching']):
+                    cnt = 0
+                    limit = w.config_integer(colorize_config_option['match_limit'])
 
-                    if nick in word:
-                        # Is there a nick that contains nick and has a greater lenght?
-                        # If so let's save that nick into var biggest_nick
-                        biggest_nick = ""
-                        for i in colored_nicks[buffer]:
-                            if nick in i and nick != i and len(i) > len(nick):
-                                if i in word:
-                                    # If a nick with greater len is found, and that word
-                                    # also happens to be in word, then let's save this nick
-                                    biggest_nick = i
-                        # If there's a nick with greater len, then let's skip this
-                        # As we will have the chance to colorize when biggest_nick
-                        # iterates being nick.
-                        if len(biggest_nick) > 0 and biggest_nick in word:
-                            pass
-                        elif len(word) < len(biggest_nick) or len(biggest_nick) == 0:
-                            new_word = word.replace(nick, '%s%s%s' % (nick_color, nick, reset))
-                            line = line.replace(word, new_word)
-            # Let's use lazy matching for nick
-            else:
+                    for word in line.split():
+                        cnt += 1
+                        assert cnt < limit
+                        #  if cnt > limit:
+                            #  raise RuntimeError('Exceeded colorize_nicks.look.match_limit.');
+
+                        if w.config_boolean(colorize_config_option['ignore_nicks_in_urls']) and \
+                              word.startswith(('http://', 'https://')):
+                            continue
+
+                        if nick in word:
+                            # Is there a nick that contains nick and has a greater lenght?
+                            # If so let's save that nick into var biggest_nick
+                            biggest_nick = ""
+                            for i in colored_nicks[buffer]:
+                                cnt += 1
+                                assert cnt < limit
+
+                                if nick in i and nick != i and len(i) > len(nick):
+                                    if i in word:
+                                        # If a nick with greater len is found, and that word
+                                        # also happens to be in word, then let's save this nick
+                                        biggest_nick = i
+                            # If there's a nick with greater len, then let's skip this
+                            # As we will have the chance to colorize when biggest_nick
+                            # iterates being nick.
+                            if len(biggest_nick) > 0 and biggest_nick in word:
+                                pass
+                            elif len(word) < len(biggest_nick) or len(biggest_nick) == 0:
+                                new_word = word.replace(nick, '%s%s%s' % (nick_color, nick, reset))
+                                line = line.replace(word, new_word)
+
+                # Switch to lazy matching
+                else:
+                    raise AssertionError
+
+            except AssertionError:
+                # Let's use lazy matching for nick
                 nick_color = colored_nicks[buffer][nick]
                 # The two .? are in case somebody writes "nick:", "nick,", etc
                 # to address somebody
@@ -247,6 +268,7 @@ def colorize_cb(data, modifier, modifier_data, line):
                 if match is not None:
                     new_line = line[:match.start(2)] + nick_color+nick+reset + line[match.end(2):]
                     line = new_line
+
     return line
 
 def colorize_input_cb(data, modifier, modifier_data, line):
