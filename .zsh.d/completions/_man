#compdef man apropos whatis

# Notes:
# - Solaris is the only OS that doesn't allow the `man n page` syntax — you must
#   use `man -s n page`
# - We assume that Linux distributions are using either man-db or mandoc
# - @todo Option exclusivity isn't super accurate
# - @todo Linux apropos/whatis take options; we don't complete them yet
# - @todo It may be worthwhile to have _man_pages cache the pages it finds;
#   section 3 in particular can be very slow to enumerate on some systems
# - @todo Darwin supports HTML man pages; we don't

_man() {
  local dirs expl mrd awk variant noinsert
  local -a context line state state_descr args modes
  local -aU sects
  local -A opt_args val_args

  if [[ $service == man ]]; then
    # Treat mandoc-based systems (Alpine, Illumos, etc.) as OpenBSD
    _pick_variant -r variant openbsd='-S subsection' $OSTYPE ---

    modes=(
      -f -K -k -l -R -w -W
      --apropos
      --global-apropos
      --local-file
      --locationG
      --location-cat
      --recode
      --whatis
      --where
      --where-cat
    )
    [[ $variant == darwin* ]] && modes+=(-t)

    args=(
      "(${(j< >)modes})"{-f,--whatis}'[display short description (like whatis)]'
      "(${(j< >)modes})"{-k,--apropos}'[search for keyword (like apropos)]'
      '(-M --manpath)'{-M+,--manpath=}'[specify manual search path]:manual search path:_sequence -s\: _directories'
    )
    if [[ $variant == (darwin|dragonfly|freebsd|linux)* ]]; then
      args+=(
        '(-a -S -s --all --sections)'{-a,--all}'[display all matching pages]'
        '(-P --pager)'{-P+,--pager=}'[specify output pager]:pager:_path_commands'
        # @todo Could enumerate these
        '(-p --preprocessor)'{-p+,--preprocessor=}'[specify roff preprocessor sequence]:preprocessor sequence'
      )
    else
      args+=('(-s)-a[display all matching pages]')
    fi
    [[ $variant == solaris* ]] || args+=(
      '(-C --config-file)'{-C+,--config-file=}'[specify configuration file]:configuration file:_files'
      "(${(j< >)modes})"{-w,--path,--where}'[display file locations]'
    )
    [[ $variant == (netbsd|openbsd)* ]] || args+=(
      # @todo FreeBSD allows this to be given multiple times
      '(-d --debug)'{-d,--debug}'[display debugging information]'
    )
    [[ $variant == (darwin|dragonfly|freebsd|linux|solaris)* ]] && args+=(
      '(-7 -H -t --ascii --html --troff)'{-t,--troff}'[format man page for raster device]'
    )
    [[ $variant == (darwin|linux)* ]] && args+=(
      "(${(j< >)modes})"{-K,--global-apropos}'[search for keyword in all pages]'
      '(-m --systems)'{-m+,--systems=}'[search manual of specified system]:operating system'
    )
    [[ $variant == (darwin|dragonfly|freebsd)* ]] && args+=(
      '(: -)-h[display help information]'
      '(-a)-S+[specify manual sections to search]: :->sects'
    )
    [[ $variant == (dragonfly|freebsd)* ]] && args+=(
      # @todo Could enumerate these
      '-m[search manual of specified architecture]:architecture'
      '-o[use non-localized man pages]'
    )
    [[ $variant == (netbsd|openbsd)* ]] && args+=(
      '-c[disable paging]'
      '-m[augment manual search path]:manual search path:_sequence -s\: _directories'
      '(-a)-s+[specify manual section to search]: :->sects'
    )
    [[ $variant == linux* ]] && args+=(
      '(: -)'{-\?,--help}'[display help information]'
      '(-7 -t -H -T -Z --ascii --html --troff --troff-device --ditroff)'{-7,--asci}'[translate man pages for 7-bit terminal]'
      '(-D --default)'{-D,--default}'[reset man to default options]'
      # @todo Could enumerate these
      '(-E --encoding)'{-E+,--encoding=}'[specify output encoding]:encoding'
      '(-e --extension)'{-e+,--extension=}'[specify sub-extension]:sub-extension'
      '(-H --html)'{-H-,--html=-}'[produce HTML output for specified browser]::Web browser:_path_commands'
      '(-i -I --ignore-case --match-case)'{-i,--ignore-case}'[search case-insensitively]'
      '(-i -I --ignore-case --match-case)'{-I,--match-case}'[search case-sensitively]'
      '(-L --locale)'{-L+,--locale=}'[specify locale]:locale:_locales'
      "(${(j< >)modes})"{-l+,--local-file=}'[format and display specified file]:*:::manual file:_files'
      "!(${(j< >)modes})"{--location,--location-cat}
      '--names-only[match only page names (with --regex or --wildcard)]'
      '(--nh --no-hyphenation)'{--nh,--no-hyphenation}'[disable hyphenation]'
      '(--nj --no-justification)'{--nj,--no-justification}'[disable justification]'
      '--no-subpages[do not combine pairs of page names into single page name]'
      # @todo Could enumerate these
      "(${(j< >)modes})"{-R+,--recode=}'[output man page in specified encoding]:encoding'
      '(-r --prompt)'{-r+,--prompt=}'[specify prompt for less]:less prompt'
      '(-a --all --wildcard)--regex[treat page name as regular expression]'
      '(-a -S -s --all --sections)'{-S+,-s+,--sections=}'[specify manual sections to search]: :->sects'
      # @todo Could enumerate these
      '(-T -t --troff --troff-device)'{-T-,--troff-device=-}'[specify roff output device]::roff output device'
      '(-u --update)'{-u,--update}'[update database caches]'
      '(: -)--usage[display brief usage information]'
      '(: -)'{-V,--version}'[display version information]'
      "(${(j< >)modes})"{-W,--where-cat}'[display cat file locations]'
      '--warnings=[enable specified groff warnings]:groff warnings'
      '(-a --all --regex)--wildcard[treat page name as shell glob]'
      # @todo Could enumerate these
      '(-X --gxditview)'{-X-,--gxditview=-}'[display output in gxditview using specified DPI (default: 75)]::DPI'
      # @todo Post-process how?
      '(-t --troff -Z --ditroff)'{-Z,--ditroff}'[post-process output for chosen device]'
    )
    [[ $variant == darwin* ]] && args+=(
      # Browsers are usually in /Applications, which isn't often in PATH
      '-B+[specify browser to use for HTML files]:Web browser:_files'
      '-c[reformat source man page]'
      # @todo -d should be exclusive with this above
      '(-d)-D[display man page along with debugging information]'
      '(-D -F --preformat)'{-F,--preformat}'[format man page only (do not display)]'
      '-H+[specify command to render HTML as text]:HTML pager:_path_commands'
      # --help and --version are undocumented but functional
      '(: -)--help[display help information]'
      # -s is also undocumented; it's provided for compatibility with Solaris
      '!(-S)-s+: :->sects'
      '(: -)'{-v,--version}'[display version information]'
      "(${(j< >)modes})-W[display file locations, one per line, with no other information]"
    )
    [[ $variant == netbsd* ]] && args+=(
      '-h[display only synopsis lines]'
      '(: -)-p[display manual search path]'
      '-S+[display only man pages with file names matching specified string]:search string'
    )
    [[ $variant == openbsd* ]] && args+=(
      "(${(j< >)modes})-l+[format and display specified file]:*:::manual file:_files"
      # @todo Could enumerate these
      '-S[search manual of specified architecture]:architecture'
    )
    [[ $variant == solaris* ]] && args+=(
      "(${(j< >)modes})-l[display file locations]"
      '-r[format man page only (do not display)]'
      '(-a)-s+[specify manual sections to search]: :->sects'
      # @todo Does this in fact want a file path?
      'T+[format man page using specified macro package]:macro package:_files'
    )

    # Strip (most) long options from non-Linux platforms
    if [[ $variant == darwin* ]]; then
      args=(${(M)args:#((#s)|*\))(\*|)(-[^-]|--(help|path|pref|vers))*})
    elif [[ $variant != linux* ]]; then
      args=(${(M)args:#((#s)|*\))(\*|)-[^-]*})
    fi
  fi

  _arguments -s -S : $args '*::: :->man' && return 0
  [[ -n $state ]] || return 1

  if ((! $#_manpath)); then
    local mp
    mp=(${(s.:.)$(manpath 2>/dev/null)})
    [[ "$mp" == *:* ]] && mp=(${(s.:.)mp})
    if (($#mp)); then
      _manpath=($mp)
    elif (($#manpath)); then
      _manpath=($manpath)
    fi
  fi

  (($#_manpath)) ||
      _manpath=(/usr/man(-/) /(opt|usr)/(pkg|dt|share|X11R6|local)/(cat|)man(-/))

  # Override man path
  [[ -n ${opt_args[-M]} ]] &&
  _manpath=(${(s<:>)opt_args[-M]})
  # Augment man path
  [[ $variant == (netbsd|openbsd)* ]] &&
  [[ -n ${opt_args[-m]} ]] &&
  _manpath+=(${(s<:>)opt_args[-m]})

  # `sman' is the SGML manual directory for Solaris 7.
  # 1M is system administrator commands on SVR4

  mrd=(${^_manpath/\%L/${LANG:-En_US.ASCII}}/mandb(N))

  # $sect is from the command line, the "3p" in "man 3p memcpy".
  #   It may also be a |-joined (and later in the code "()"-enclosed) list of
  #   section names.
  #   TODO: disentangle this to always be an array.
  # $sect_dirname is from the filesystem, the "3" in "/usr/share/man/man3"
  # These are used by _man_pages
  local sect sect_dirname

  # Take care: We can't use the sections from these options until we've finished
  # completing them; otherwise (e.g.) -s1:<TAB> will give no results
  if
    [[ $service != man ]] || [[ $state == sects ]] || (($+opt_args[-a]))
  then
    sect='*'
  elif
    [[ $variant == (darwin|linux)* ]] &&
    [[ -n ${opt_args[(i)-S|-s|--sections]} ]]
  then
    noinsert=1
    sect=${opt_args[${opt_args[(i)-S|-s|--sections]}]//[:,]/|}
  elif
    [[ $variant == (netbsd|openbsd|solaris)* ]] && [[ -n ${opt_args[(i)-s]} ]]
  then
    noinsert=1
    sect=${opt_args[-s]//,/|}
  elif [[ $variant == (dragonfly|freebsd)* ]] && [[ $+opt_args[-S] ]]; then
    noinsert=1
    sect=${opt_args[-S]//:/|}
  elif ((CURRENT > 1)) && [[ $variant != solaris* ]]; then
    noinsert=1
    saved_sect=$words[1]
    ## "3f" is the only multi-letter section using a self-titled
    ## directory; every other multi-letter sections uses only
    ## the first character as its location _except_ "3f" (e.g.
    ## "3p" is under "man3/" instead of "man3p/"). the parameter
    #3 expansions use '/' as the substitution sentinel since it
    ## is the only character that is illegal in a directory name.
    #
    sect=${${${saved_sect:/#3f/\/}:0:1}:/#\//3f}
  elif [[ -n ${sect:=$MANSECT} ]]; then
    sect=${sect//:/|}
  fi

  if [[ $sect = (<->*|1M|l|n|x) || $sect = *\|* ]]; then
    for sect in ${(s.|.)sect}; do
      if [[ $sect == (<->[cEFMmnpS]#|l|n|x) ]]; then
        sects+=($sect)
      else
        sects+=(${sect%%[^0-9]#})
      fi
    done
    dirs=($^_manpath/(sman|man|cat)${^sects}*/)
    sect=${(j<|>)sects}
    [[ $sect == *'|'* ]] && sect="($sect)"
    awk="\$2 == \"$sect\" {print \$1}"
  else
    sect=
    dirs=($^_manpath/(sman|man|cat)*/)
    awk='{print $1}'
  fi

  # Solaris 11 and on have a man-index directory that doesn't contain manpages
  dirs=(${dirs:#*/man-index/})
  sects=(${(o)${dirs##*(man|cat)}%/})
  sects+=(0p 1p 3n 3p)

  [[ $state == sects ]] && {
    if ((! $#sects)); then
      _message 'manual section'
      return 1
    elif [[ $variant == (darwin|dragonfly|freebsd|linux)* ]]; then
      _values -s: 'manual section' $sects
    elif [[ $variant == solaris* ]]; then
      _values -s, 'manual section' $sects
    else
      _values 'manual section' $sects
    fi
    return
  }

  if zstyle -t ":completion:${curcontext}:manuals" separate-sections; then
    local ret=1
    local -A sect_desc

    (($#sects)) || return 1

    sect_desc[0]="header files"
    sect_desc[0p]="posix standard header files"
    sect_desc[1]="executable programs or shell commands"
    sect_desc[1p]="posix standard executable programs or shell commands"
    sect_desc[2]="system calls (functions provided by the kernel)"
    sect_desc[3]="library calls (functions within program libraries)"
    sect_desc[3f]="fortran functions"
    sect_desc[3n]="network functions"
    sect_desc[3p]="posix standard library calls (functions within program libraries)"
    sect_desc[4]="special files (usually found in /dev)"
    sect_desc[5]="file formats and conventions (e.g. /etc/passwd)"
    sect_desc[6]="games"
    sect_desc[7]="miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)"
    sect_desc[8]="system administration commands (usually only for root)"
    sect_desc[9]="kernel routines"
    sect_desc[l]="local documentation"
    sect_desc[n]="tk built-in commands"
    sect_desc[x]="x.org functions"

    _tags manuals.${^sects}
    while _tags; do
      for sect_dirname in $sects; do
          _requested manuals.$sect_dirname expl \
                "manual page, section $sect_dirname ($sect_desc[$sect_dirname])" _man_pages && ret=0
      done
      ((ret)) || return 0
    done
    ## To fall back to other sections' manpages when completing filenames, like
    ## the 'else' codepath does:
    #
    ((ret)) &&
    [[ $PREFIX$SUFFIX == */* ]] &&
    [[ $variant == (darwin|dragonfly|freebsd)* ]] && {
      sect_dirname=
      _wanted manuals expl 'manual page' _man_pages && return
    }

    return 1
  else
    sect_dirname=
    _wanted manuals expl 'manual page' _man_pages
  fi
}

_man_pages() {
  local pages sopt

  # What files corresponding to manual pages can end in.
  local suf='.((?|<->*)(|.gz|.bz2|.Z|.lzma))'

  if [[ $PREFIX$SUFFIX = */* ]]; then
    # Easy way to test for versions of man that allow file names.
    # This can't be a normal man page reference.
    # Try to complete by glob first.
    if [[ -n $sect_dirname ]]; then
      _path_files -g "*.*$sect_dirname*(|.gz|.bz2|.Z|.lzma)" "$expl[@]"
    else
      _path_files -g "*$suf" "$expl[@]" && return
      _path_files "$expl[@]"
    fi
    return $?
  fi

  pages=(${(M)dirs:#*$sect_dirname/})
  pages=(${^pages}/"*$sect${sect:+"*"}")
  pages=(${^~pages}(N:t))

  (($#mrd)) && pages[$#pages+1]=($(awk $awk $mrd))

  # Remove any compression suffix, then remove the minimum possible string
  # beginning with .<->: that handles problem cases like files called
  # `POSIX.1.5'.

  [[ $variant = solaris* ]] && sopt='-s '
  if ((CURRENT > 1 || noinsert)) ||
      ! zstyle -t ":completion:${curcontext}:manuals.$sect_dirname" insert-sections
  then
    compadd "$@" - ${pages%$~suf}
  else
    compadd "$@" -P "$sopt$sect_dirname " - ${pages%$~suf}
  fi
}

_man "$@"
