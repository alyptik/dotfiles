#compdef man apropos whatis

_man() {
	local dirs expl mrd awk

	if (( $words[(I)-M] == (( $CURRENT - 1 )) )); then
		_directories && return 0
	fi

	if [[ $service == man ]] && (( $words[(I)-l] + $words[(I)--local-file] )); then
		_files || return 0
	fi

	if (( !$#_manpath )); then
		local mp
		mp=( ${(s.:.)$(manpath 2>/dev/null)} )
		[[ "$mp" == *:* ]] && mp=( ${(s.:.)mp} )
		if (( $#mp )); then
			_manpath=( $mp )
		elif (( $#manpath )); then
			_manpath=( $manpath )
		fi
	fi

	(( $#_manpath )) ||
	_manpath=( /usr/man(-/) /(opt|usr)/(pkg|dt|share|X11R6|local)/(cat|)man(-/) )

	integer index=$words[(I)-M]
	if (( index )); then
		local opt
		opt=$words[index+1]
		_manpath=($opt)
	fi

	# `sman' is the SGML manual directory for Solaris 7.
	# 1M is system administrator commands on SVR4

	mrd=(${^_manpath/\%L/${LANG:-En_US.ASCII}}/mandb(N))

	# $sect is from the command line, the "3p" in "man 3p memcpy".
	#   It may also be a |-joined (and later in the code "()"-enclosed) list of
	#   section names.
	#   TODO: disentangle this to always be an array.
	# $sect_dirname is from the filesystem, the "3" in "/usr/share/man/man3"
	# These are used by _man_pages
	local sect sect_dirname
	if [[ $OSTYPE = solaris* ]]; then
		sect=${${words[(R)-s*]#-s}:-$words[$words[(i)-s]+1]}
		sect="${sect//,/|}"
	elif [[ -n ${sect:=$words[$words[(i)-S]+1]} || -n ${sect:=$MANSECT} ]]; then
		sect="${sect//:/|}"
		sect="${sect//,/|}"
	elif (( CURRENT > 2 )); then
		case $words[2] in
		(-a) sect='*';;
		(-*) ;;
		(*)  sect=$words[2];;
		esac
	fi

	if [[ $sect = (<->*|1M|l|n) || $sect = *\|* ]]; then
		() {
			local -a sects=( ${(s.|.)sect} )
			if [[ $sect != (l|n) ]]; then
				sects=( ${sects%%[^0-9]#} )
			fi
			dirs=( $^_manpath/(sman|man|cat)${^sects}*/ )
		}
		if [[ $sect == *\|* ]]; then sect="($sect)"; fi
		awk="\$2 == \"$sect\" {print \$1}"
	else
		dirs=( $^_manpath/(sman|man|cat)*/ )
		awk='{print $1}'
	fi
	# Solaris 11 and on have a man-index directory that doesn't contain manpages
	dirs=( ${dirs:#*/man-index/} )
	if [[ $OSTYPE = solaris* && ( $words[CURRENT] = -s* || $words[CURRENT-1] == -s ) ]]; then
		[[ $words[CURRENT] = -s* ]] && compset -P '-s'
		sects=( ${(o)${dirs##*(man|cat)}%/} )
		_wanted sections expl 'section' compadd -a sects
	elif zstyle -t ":completion:${curcontext}:manuals" separate-sections; then
		typeset -U sects
		local ret=1

		sects=( ${(o)${dirs##*(man|cat)}%/} )

		(( !$#sects )) && return 1

		_tags manuals.${^sects}
			while _tags; do
				for sect_dirname in $sects; do
					_requested manuals.$sect_dirname expl \
						"manual page, section $sect_dirname" \
						_man_pages && ret=0
				done
				(( !ret )) && return 0
			done
			## To fall back to other sections' manpages when completing filenames, like
			## the 'else' codepath does:

			# if (( ret )) && [[ $PREFIX$SUFFIX == */* ]]; then
			#         sect_dirname=
			#         _wanted manuals expl 'manual page' _man_pages && return 0
			# fi

			return 1
	else
		sect_dirname=
		_wanted manuals expl 'manual page' _man_pages
	fi
}

_man_pages() {
	local pages sopt

	# What files corresponding to manual pages can end in.
	local suf='.((?|<->*)(|.gz|.bz2|.Z|.lzma))'

	if [[ $PREFIX$SUFFIX = */* ]]; then
		# Easy way to test for versions of man that allow file names.
		# This can't be a normal man page reference.
		# Try to complete by glob first.
		if [[ -n $sect_dirname ]]; then
			_path_files -g "*.*$sect_dirname*(|.gz|.bz2|.Z|.lzma)" "$expl[@]"
		else
			_path_files -g "*$suf" "$expl[@]" && return
			_path_files "$expl[@]"
		fi
		return $?
	fi

	pages=( ${(M)dirs:#*$sect_dirname/} )
	pages=( ${^pages}/"*$sect${sect:+"*"}" );
	pages=( ${^~pages}(N:t) )

	(($#mrd)) && pages[$#pages+1]=($(awk $awk $mrd))

	# Remove any compression suffix, then remove the minimum possible string
	# beginning with .<->: that handles problem cases like files called
	# `POSIX.1.5'.

	[[ $OSTYPE = solaris* ]] && sopt='-s '
	if ((CURRENT > 2)) || ! zstyle -t ":completion:${curcontext}:manuals.$sect_dirname" insert-sections; then
		compadd "$@" - ${pages%$~suf}
	else
		compadd "$@" -P "$sopt$sect_dirname " - ${pages%$~suf}
	fi
}

local -A opt_args
local -a sections
local context state state_descr line
local curcontext="$curcontext"

sections=(${${(R)${(M)$(print -- /usr/share/man/man* 2>/dev/null)%man*}#man}/\//})

_arguments -C \
	'-C[use this user configuration file]' \
	'--config-file=FILE[use this user configuration file]' \
	'-d[emit debugging messages]' \
	'--debug[emit debugging messages]' \
	'-D[reset all options to their default values]' \
	'--default[reset all options to their default values]' \
	'--warnings[enable warnings from groff]' \
	'-f[equivalent to whatis]' \
	'--whatis[equivalent to whatis]' \
	'-k[equivalent to apropos]' \
	'--apropos[equivalent to apropos]' \
	'-K[search for text in all pages]' \
	'--global-apropos[search for text in all pages]' \
	'-l[interpret PAGE argument(s) as local filename(s)]:local page:->file' \
	'--local-file[interpret PAGE argument(s) as local filename(s)]:local page:->file' \
	'-w[print physical location of man page(s)]' \
	'--where[print physical location of man page(s)]' \
	'--path[print physical location of man page(s)]' \
	'--location[print physical location of man page(s)]' \
	'-W[print physical location of cat file(s)]' \
	'--where-cat[print physical location of cat file(s)]' \
	'--location-cat[print physical location of cat file(s)]' \
	'-c[used by catman to reformat out of date cat pages]' \
	'--catman[used by catman to reformat out of date cat pages]' \
	'-R[output source page encoded in ENCODING]' \
	'--recode[output source page encoded in ENCODING]' \
	'-L[define the locale for this particular man search]' \
	'--locale[define the locale for this particular man search]' \
	'-m[use manual pages from other systems]' \
	'--systems[use manual pages from other systems]' \
	'-M[set search path for manual pages to PATH]' \
	'--manpath[set search path for manual pages to PATH]' \
	'-S[use colon separated section list]' \
	'-s[use colon separated section list]' \
	'--sections[use colon separated section list]' \
	'-e[limit search to extension type EXTENSION]' \
	'--extension[limit search to extension type EXTENSION]' \
	'-i[look for pages case-insensitively (default)]' \
	'--ignore-case[look for pages case-insensitively (default)]' \
	'-I[look for pages case-sensitively]' \
	'--match-case[look for pages case-sensitively]' \
	'--regex[show all pages matching regex]' \
	'--wildcard[show all pages matching wildcard]' \
	'--names-only[match page names only, not descriptions]' \
	'-a[find all matching manual pages]' \
	'--all[find all matching manual pages]' \
	'-u[force a cache consistency check]' \
	'--update[force a cache consistency check]' \
	$'--no-subpages[don\'t try subpages, e.g. \'man foo bar\' => \'man foo-bar\']' \
	'-P[Use program PAGER to display output]' \
	'--pager[use program PAGER to display output]' \
	$'-r[provide the `less\' pager with a prompt]' \
	$'--prompt[provide the `less\' pager with a prompt]' \
	'-7[display ASCII translation of certain latin1 chars]' \
	'--ascii[display ASCII translation of certain latin1 chars]' \
	'-E[use selected output encoding]' \
	'--encoding[use selected output encoding]' \
	'--no-hyphenation[turn off hyphenation]' \
	'--nh[turn off hyphenation]' \
	'--no-justification[turn off justification]' \
	'--nj[turn off justification]' \
	'-p[STRING indicates which preprocessors to run:]' \
	'--preprocessor[STRING indicates which preprocessors to run:]' \
	'-t[use groff to format pages]' \
	'--troff[use groff to format pages]' \
	'-T[use groff with selected device]' \
	'--troff-device[use groff with selected device]' \
	'-H[use  or BROWSER to display HTML output]' \
	'--html[use  or BROWSER to display HTML output]' \
	'-Z[use groff and force it to produce ditroff]' \
	'--ditroff[use groff and force it to produce ditroff]' \
	'-?[give this help list]' \
	'--help[give this help list]' \
	'--usage[give a short usage message]' \
	'-V[print program version]' \
	'--version[print program version]' \
	"*:manpages:->page" && ret=0
	# "1:sections:->secton" "*:manpages:->page" && ret=0

case "$state" in
# (section)
#         local -a sects
#         sects=($sections)
#         _describe -t sects "sections" sects && ret=0
#         ;;
(page)
	local -a manpgs
	if [[ -z "${${line[1]}:*sections}" ]]; then
		_wanted manuals expl 'manual page' _man && ret=0
	else
		for i in $manpath
		do
			manpgs+=(${(f@)$(print ${i}/man${line[1]}/*(:t))%%.${line[1]}*.*})
		done
		_describe -t manpgs "manpages" manpgs && ret=0
	fi
	;;
(file)
	;|
# fallthrough
(*)
	_wanted files expl 'local page' _files && ret=0
	;;

esac

return 1
