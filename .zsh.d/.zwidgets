#!/usr/bin/env zsh
#
# .zwidgets - non-compiled shell functions

# inline calculator `= 4 * 2`
function '='() { print -r - $(($*)); }

function ztype() { () for 1 { print -r - ${${(z)$(whence -w $1)}[2]}; } "$@"; }

# fetch github PRs
function get_muh_prs() {
	# fetch PR list
	if ! git rev-list pull-requests -- >/dev/null 2>&1; then
		# remove broken remote if exists
		git remote show pull-requests >/dev/null 2>&1 && git remote remove pull-requests
		# map list of PRs at +refs/pull/*/head to pull-request remote
		git remote add pull-requests "${1:-"$(git remote get-url up || git remote get-url origin)"}" 2>/dev/null
		git config remote.pull-requests.fetch '+refs/pull/*/head:refs/remotes/pull-requests/*'
		git fetch -qj8 pull-requests || exit 1
	fi
	# map `git show-branch` to the list of PRs
	() for 1 { git show-branch $1; } ${(f@)$(git branch -r --list 'pull-requests/*')}
}

# set branch to pull from upstream but push to origin
function set_muh_upstream() {
	local branch
	branch=${${(z)$(git branch)}[2]}
	git config branch.$branch.remote up
	git config branch.$branch.pushremote origin
	print -rf 'remote:\t\t%s\n' - $(git config branch.$branch.remote)
	print -rf 'push remote:\t%s\n' - $(git config branch.$branch.pushremote)
}

function zle-run-help() {
	local -a cmd fallback final
	# isolate the last command in the list
	cmd[1]="${BUFFER##*(\||&|\(|\)|\{|\}|\||\`|do|then|else|time|sudo|_)##}"
	cmd[1]="${cmd[1]/#[[:blank:]]#}"
	cmd[1]="${cmd[1]%%[[:blank:]]*}"
	cmd[2]="${BUFFER#*$cmd[1]}"
	cmd[2]="${cmd[2]/#[[:blank:]]#}"
	cmd[2]="${cmd[2]%%[[:blank:];\|&\(\)\{\}\`]*}"
	# fallback to the first command in the list
	fallback[1]="${(R)${${BUFFER#(sudo|_)}/#[[:blank:]]#}%[[:blank:]][^ ]*}"
	fallback[2]="${BUFFER#*$fallback[1]}"
	fallback[2]="${fallback[2]/#[[:blank:]]#}"
	fallback[2]="${fallback[2]%%[[:blank:];\|&\(\)\{\}\`]*}"
	# use fallback if cmd is invalid
	if command -v $cmd[1] >/dev/null 2>&1; then
		final=(${cmd[1]:/#g/git} $cmd[2])
	else
		final=(${fallback[1]:/#g/git} $fallback[2])
	fi
	# resolve git aliases
	if [[ $final[1] == git && -n $final[2] ]]; then
		git_final=${${(z)$(git config --global "alias.$final[2]" 2>/dev/null)}[1]}
		if [[ -n "$git_final" ]]; then
			final[2]=$git_final
		fi
		final[1]="$final[1] $final[2]"
		unset final[2]
	# use the zshall manpage when the command is zsh
	elif [[ $final[1] == zsh ]]; then
		final[1]="zshall"
	fi
	zle push-input
	BUFFER="run-help $final"
	zle accept-line
	zle -R
}

# compile zwc files
function zwc() {
	zrecompile -p -- \
		-MUz $ZDOTDIR/zfuncs.zwc $ZDOTDIR/zfunctions/* -- \
		-MUz $ZDOTDIR/zcomps.zwc $ZDOTDIR/completions/enabled/* -- \
		-MUz $ZDOTDIR/.zcompdump.zwc $ZDOTDIR/.zcompdump -- \
		-MUz $ZDOTDIR/.zwidgets.zwc $ZDOTDIR/.zwidgets -- \
		-MUz $ZDOTDIR/.zshenv.zwc $ZDOTDIR/.zshenv -- \
		-MUz $ZDOTDIR/.zshrc.zwc $ZDOTDIR/.zshrc -- \
		-MUz $ZDOTDIR/.zlogout.zwc $ZDOTDIR/.zlogout
}

function zle-fman() {
	local -a cmdline mansects
	local cmd glob section
	if ((!$#MANSECT)); then
		mansects=(${${(R)${(M)$(:-/usr/share/man/man*)%man*}#man}/\//})
	else
		mansects=(${${(s|:|)MANSECT}[@]})
	fi
	cmdline=("${(z)=BUFFER}")
	if ((!$#BUFFER)); then
		LBUFFER="fman zshall "
		return
	fi
	case "${cmdline[1]}" in
	(${~${(j:|:)mansects[@]}})
		section="${cmdline[1]}"
		shift cmdline
		cmd="${cmdline[1]}";;
	(*)
		# Brute force search because “man -w”
		# breaks when stdin isn't a terminal
		cmd="${cmdline[1]}"
		for i in ${^manpath}/man*/${(q)cmd}.*(N); do
			if [[ -f "$i" ]]; then
				section="${${i%/*}##*/man}"
				break
			fi
		done;;
	esac
	if  [[ $cmd == zsh ]]; then
		cmd="zshall"
	fi
	# Setting “section=zshall” is a bit misleading but
	# this approach removes the need for “if” nesting
	if ((${#cmdline[@]} > 1)); then
		BUFFER="fman ${section:-zshall} $cmd '${cmdline[@]:1}'"
	else
		BUFFER="fman ${section:-zshall} '$cmd'"
	fi
	# zle redisplay
	# zle accept-line
	zle -R
}

function zle-zaw-help() {
	if (($#BUFFER)); then
		zle push-input
	fi
	BUFFER="man zaw"
	zle accept-line
}

function zle-less() {
	local -a args
	if ((!$#BUFFER)); then
		args=("${(z)=history[$((HISTCMD-1))]}")
	else
		args=("${(z)=BUFFER}")
	fi
	# eval needed to resolve static named directories
	while ([[ "${args[1]}" =~ ^..?$ || ! -e "${(e)args[1]}" ]]); do
		# Prevent infinite loop
		((${#args} > 1)) || return
		shift args
	done
	BUFFER="less -JRMXs ${args[1]}"
	zle accept-line
}

function zle-vim() {
	local -a args
	if ((!$#BUFFER)); then
		args=("${(z)=history[$((HISTCMD-1))]}")
	else
		args=("${(z)=BUFFER}")
	fi
	# eval needed to resolve static named directories
	while ([[ "${args[1]}" =~ ^..?$ || ! -e "${(e)args[1]}" ]]); do
		# Prevent infinite loop
		((${#args} > 1)) || return
		shift args
	done
	BUFFER="vim ${args[1]}"
	zle accept-line
}

function zle-compdef() {
	local cmd fallback final
	if [[ -z "$BUFFER" ]]; then
		LBUFFER="compdef _gnu_generic "
		return
	fi
	# isolate the last command in the list
	cmd="${BUFFER##*(;|\||&|\(|\)|\{|\}|\||\`|do|then|else|time|sudo|_)##}"
	cmd="${cmd/#[[:blank:]]#}"
	cmd="${cmd%%[[:blank:]]*}"
	# fallback to the first command in the list
	fallback="${(R)${${b#(sudo|_)}/#[[:blank:]]#}%%[[:blank:]][^ ]*}"
	# use fallback if cmd is invalid
	if command -v $cmd >/dev/null; then
		final=$cmd
	else
		final=$fallback
	fi
	zle push-input
	BUFFER="compdef _gnu_generic $final"
	zle accept-line
}

function zle-backwards-delete-to-char() {
	if ((!$#BUFFER)); then
		return
	fi
	read -k 1 -s -r
	LBUFFER="${LBUFFER%${REPLY}*}"

}

function zle-backwards-zap-to-char() {
	read -k 1 -s -r
	if ((!$#BUFFER)); then
		return
	fi
	LBUFFER="${LBUFFER%${REPLY}*}$REPLY"
}

# x clipboard functions
function insert-clip-selection() { LBUFFER="$LBUFFER$(xclip -r -o -sel clip </dev/null 2>/dev/null)"; }
function insert-x-selection() { LBUFFER="$LBUFFER$(xclip -r -o </dev/null 2>/dev/null)"; }
function append-clip-selection() {
	LBUFFER="$LBUFFER$RBUFFER[1]"
	RBUFFER="$(xclip -r -o -sel clip </dev/null 2>/dev/null)${RBUFFER:1}"
	CURSOR="$#BUFFER"
}
function append-x-selection() {
	LBUFFER="$LBUFFER$RBUFFER[1]"
	RBUFFER="$(xclip -r -o </dev/null 2>/dev/null)${RBUFFER:1}"
	CURSOR="$#BUFFER"
}
function yank-clip-selection() {
	BUFFER="${BUFFER:-$CUTBUFFER}"
	zle kill-buffer && print -n - "$CUTBUFFER" | xclip -r -i -sel clip;
}
function yank-x-selection() {
	BUFFER="${BUFFER:-$CUTBUFFER}"
	zle kill-buffer && print -n - "$CUTBUFFER" | xclip -r -i;
}

function zle-list-binds() {
	zle push-input
	BUFFER="bindkey -L | hi tcsh -"
	zle accept-line
	zle -R
}

function zle-keymap-select() {
	setescapes
	case "$KEYMAP" in
	vicmd)
		printf "$cblock"
		printf "$cred";;
	emacs|$_emacs)
		printf "$cblock"
		printf "$cyellow";;
	viins|$_vi)
		printf "$cline"
		# printf "$cblock"
		printf "$cgrey";;
	esac
	zle -R
}

function zle-line-init() {
	setescapes
	case "$KEYMAP" in
	vicmd)
		printf "$cblock"
		printf "$cred";;
	emacs|$_emacs)
		printf "$cblock"
		printf "$cyellow";;
	viins|$_vi)
		printf "$cline"
		# printf "$cblock"
		printf "$cgrey";;
	esac
	# It should be noted that the O / [ confusion can occur with other keys such as Home and End
	# http://zsh.sourceforge.net/FAQ/zshfaq03.html#l25
	# It should be noted that the O / [ confusion can occur with other
	# keys such as Home and End …
	#
	# http://zsh.sourceforge.net/FAQ/zshfaq03.html#l25
	#
	# echoti smkx
	zle -R
}

function zle-line-finish() {
	setescapes
	case "$KEYMAP" in
	vicmd)
		printf "$cblock"
		printf "$cred";;
	emacs|$_emacs)
		printf "$cblock"
		printf "$cyellow";;
	viins|$_vi)
		printf "$cline"
		# printf "$cblock"
		printf "$cgrey";;
	esac
	# It should be noted that the O / [ confusion can occur with other
	# keys such as Home and End …
	#
	# http://zsh.sourceforge.net/FAQ/zshfaq03.html#l25
	#
	# echoti rmkx
	zle -R
}

function zle-refresh-keymap() {
	setescapes
	case "$_km" in
	vi)
		bindkey -e
		bindkey -v
		printf "$cline"
		# printf "$cblock"
		printf "$cgrey"
		_km=vi _vi=main _emacs="";;
	emacs)
		bindkey -v
		bindkey -e
		printf "$cblock"
		printf "$cyellow"
		_km=emacs _vi="" _emacs=main;;
	esac
	zle -R
}

function zle-toggle-keymap() {
	setescapes
	case "$_km" in
	vi)
		bindkey -e
		printf "$cblock"
		printf "$cyellow"
		_km=emacs _vi="" _emacs=main;;
	emacs)
		bindkey -v
		printf "$cline"
		# printf "$cblock"
		printf "$cgrey"
		_km=vi _vi=main _emacs="";;
	esac
	zle -R
}

function zle-emacs-keymap() {
	setescapes
	bindkey -e
	printf "$cblock"
	printf "$cyellow"
	_km=emacs _vi="" _emacs=main
}

function zle-vi-keymap() {
	setescapes
	bindkey -v
	printf "$cline"
	printf "$cgrey"
	_km=vi _vi=main _emacs=""
}

# alt-i - paste the selected entry from locate output into the command line
function zle-locate-widget() {
	local result saved saved_opts result
	saved=$BUFFER
	saved_opts=$FZF_DEFAULT_OPTS
	FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS"
	zle redisplay
	result=$(locate / | fzf -i -q "$LBUFFER" -m --tac)
	FZF_DEFAULT_OPTS=$saved_ops
	if [[ -n $result ]]; then
		LBUFFER=$LBUFFER$result
	fi
	zle redisplay
}

function zle-fh() {
	local saved saved_opts result
	saved=$BUFFER
	saved_opts=$FZF_DEFAULT_OPTS
	FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS"
	zle redisplay
	result=$(fc -l 1 | sed 's/ *[0-9]* *//' | fzf +s -q "$LBUFFER" +m --tac)
	FZF_DEFAULT_OPTS=$saved_ops
	if [[ -n $result ]]; then
		LBUFFER=$result
	fi
	zle redisplay
}

function zle-youtube-helper() {
	[[ -z "$BUFFER" ]] && return
	local -a links
	local i
	links=("${(z)=BUFFER}")
	links=("${links[@]//(#m)*/'$MATCH'}")
	BUFFER="youtube-dl $links"
	CURSOR="${#BUFFER}"
}

# .zwidgets
#
# Non-ZLE shell function section

# Make history entries from other zsh instances immediately visible
function zshreadhist() {
	# setopt extendedglob
	# old_lines=${(M)$(wc -l /store/history/.zsh_history.tmp)##[0-9]##}
	# new_lines=${(M)$(wc -l $HOME/.zsh_history)##[0-9]##}
	# if ((new_lines < 100)); then
	#         wc -l "$HOME/.zsh_history" /store/history/.zsh_history.tmp
	#         print -r - 'you messed up your history file bruh'
	#         return
	# fi
	fc -R "$HOME/.zsh_history"
	# \mkdir -p /store/history
	# \touch /store/history/.zsh_history.tmp
	# <"$HOME/.zsh_history" >/store/history/.zsh_history.tmp
}

# Set term escape strings
function setescapes() {
	{
		[[ "$TERM" =~ ^linux.*$ ]] && return
		local i tree
		typeset -g cblock cline cred cgrey cyellow
		cblock='\033[1 q'
		cline='\033[5 q'
		# cgrey='\033]12;##d7d7d7\007'
		# cgrey='\033]12;Grey\007'
		# cred='\033]12;Red\007'
		# cred='\033]12;#ff0000\007'
		# cred='\033]12;#cc241d\007'
		cred='\033]12;#fb4934\007'
		cgrey='\033]12;#a0a0a0\007'
		cyellow='\033]12;#b58900\007'
		if [[ "$TERM" =~ (linux|xterm.*) ]]; then
			cblock="" cline=""
			return
		elif ([[ -n "$TMUX" ]] && [[ -z "$STY" ]]); then
			for i in cblock cline cred cgrey cyellow; do
				eval "$i="'\\033Ptmux\;\\033'"\${$i}"'\\033\\\\'
			done
		fi
		tree=$(pstree -s "$$")
		if [[ $tree == screen ]]; then
			for i in cblock cline cred cgrey cyellow; do
				eval "$i="'\\033P'"\${$i}"'\\033\\\\'
			done
		elif [[ $tree =~ ^(termite|stjerm|qterminal)$ ]]; then
			cblock="" cline=""
		fi
	} 2>/dev/null
}

# Function to capture exit code of later command.
function check_last_exit_code() {
	local LAST_EXIT_CODE=$?
	local EXIT_CODE_PROMPT=' '
	if ((LAST_EXIT_CODE)); then
		EXIT_CODE_PROMPT+="%{$fg[yellow]%}«%{$reset_color%}"
		EXIT_CODE_PROMPT+="%{$fg_bold[yellow]%}$LAST_EXIT_CODE%{$reset_color%}"
		EXIT_CODE_PROMPT+="%{$fg[yellow]%}»%{$reset_color%}"
	fi
	print -n - $EXIT_CODE_PROMPT
}

# Show Git branch/tag, or name-rev if on detached head
function parse_git_branch() {
	(git symbolic-ref --quiet HEAD || git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
}

# Show different symbols as appropriate for various Git repository states
function parse_git_state() {
	# Compose GIT_STATE via multiple conditional appends.
	local GIT_STATE GIT_DIR NUM_AHEAD NUM_BEHIND

	GIT_DIR=$(git rev-parse --git-dir 2> /dev/null)
	NUM_AHEAD=${#${(@0)"$(git log -z --oneline @{u}.. 2>/dev/null)"}}
	NUM_BEHIND=${#${(@0)"$(git log -z --oneline ..@{u} 2>/dev/null)"}}
	if ((NUM_AHEAD)); then
		GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
	fi
	if ((NUM_BEHIND)); then
		GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
	fi
	if [[ -e "$GIT_DIR/MERGE_HEAD" ]]; then
		GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
	fi
	if [[ -n "$(git ls-files --other --exclude-standard 2>/dev/null)" ]]; then
		GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
	fi
	if ! git diff --quiet 2>/dev/null; then
		GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
	fi
	if ! git diff --cached --quiet 2>/dev/null; then
		GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
	fi
	if ((!$#GIT_STATE)); then
		return
	fi
	print -n - $GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX
}

# If inside a Git repository, print its branch and state
function git_prompt_string() {
	local ret_str
	local git_where="$(parse_git_branch)"
	if [[ -z $git_where ]]; then
		return
	fi
	ret_str="$GIT_PROMPT_SYMBOL"
	ret_str+="$(parse_git_state)"
	ret_str+="$GIT_PROMPT_PREFIX"
	ret_str+="%{$fg[yellow]%}"
	ret_str+="${git_where#(refs/heads/|tags/)}"
	ret_str+="$GIT_PROMPT_SUFFIX"
	print -n - $ret_str
}

# cleanup env and temp files
function cleanup() {
	if [[ -t 2 ]] || ((!$+_stderr)); then
		return
	fi
	if (read -u 0 </dev/stdin) <&2; then
		perl -e 'print "\n\n" . "—"x72 . "\n"' >> "/store/zsh-log-$UID.log"
		date +'%a %d %b %I:%M:%S%P %Z %Y-%m-%d' >> "/store/zsh-log-$UID.log"
		print -rf "\n$(tput setaf 9)%s$(tput sgr0)\n" 'the following errors were detected:'
		(sed 's/^.*$/\t&/' /dev/stdin | tee -a /store/zsh-log-$UID.log) <&2
		perl -e 'print "—"x72 . "\n\n"' >> "/store/zsh-log-$UID.log"
	fi
	exec 2>&$_stderr
	exec {_stderr}>&-
}
